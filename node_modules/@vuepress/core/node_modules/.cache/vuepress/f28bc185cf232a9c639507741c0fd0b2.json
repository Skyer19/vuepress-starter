{"remainingRequest":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/@vssue/api-bitbucket-v2/lib/index.js","dependencies":[{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/@vssue/api-bitbucket-v2/lib/index.js","mtime":1661659638362},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1661658709451},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js","mtime":1661658709446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}