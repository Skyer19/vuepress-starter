{"remainingRequest":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/vue-router/dist/vue-router.esm.js","dependencies":[{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/vue-router/dist/vue-router.esm.js","mtime":1661658709626},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1661658709451},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js","mtime":1661658709446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwoKLyohCiAgKiB2dWUtcm91dGVyIHYzLjYuNAogICogKGMpIDIwMjIgRXZhbiBZb3UKICAqIEBsaWNlbnNlIE1JVAogICovCgovKiAgKi8KZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogIGlmICghY29uZGl0aW9uKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIlt2dWUtcm91dGVyXSAiICsgbWVzc2FnZSk7CiAgfQp9CgpmdW5jdGlvbiB3YXJuKGNvbmRpdGlvbiwgbWVzc2FnZSkgewogIGlmICghY29uZGl0aW9uKSB7CiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKCJbdnVlLXJvdXRlcl0gIiArIG1lc3NhZ2UpOwogIH0KfQoKZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHsKICBmb3IgKHZhciBrZXkgaW4gYikgewogICAgYVtrZXldID0gYltrZXldOwogIH0KCiAgcmV0dXJuIGE7Cn0KLyogICovCgoKdmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7Cgp2YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsKICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTsKfTsKCnZhciBjb21tYVJFID0gLyUyQy9nOyAvLyBmaXhlZCBlbmNvZGVVUklDb21wb25lbnQgd2hpY2ggaXMgbW9yZSBjb25mb3JtYW50IHRvIFJGQzM5ODY6Ci8vIC0gZXNjYXBlcyBbIScoKSpdCi8vIC0gcHJlc2VydmUgY29tbWFzCgp2YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgewogIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKS5yZXBsYWNlKGNvbW1hUkUsICcsJyk7Cn07CgpmdW5jdGlvbiBkZWNvZGUoc3RyKSB7CiAgdHJ5IHsKICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTsKICB9IGNhdGNoIChlcnIpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIHdhcm4oZmFsc2UsICJFcnJvciBkZWNvZGluZyBcIiIgKyBzdHIgKyAiXCIuIExlYXZpbmcgaXQgaW50YWN0LiIpOwogICAgfQogIH0KCiAgcmV0dXJuIHN0cjsKfQoKZnVuY3Rpb24gcmVzb2x2ZVF1ZXJ5KHF1ZXJ5LCBleHRyYVF1ZXJ5LCBfcGFyc2VRdWVyeSkgewogIGlmIChleHRyYVF1ZXJ5ID09PSB2b2lkIDApIGV4dHJhUXVlcnkgPSB7fTsKICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5OwogIHZhciBwYXJzZWRRdWVyeTsKCiAgdHJ5IHsKICAgIHBhcnNlZFF1ZXJ5ID0gcGFyc2UocXVlcnkgfHwgJycpOwogIH0gY2F0Y2ggKGUpIHsKICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTsKICAgIHBhcnNlZFF1ZXJ5ID0ge307CiAgfQoKICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkgewogICAgdmFyIHZhbHVlID0gZXh0cmFRdWVyeVtrZXldOwogICAgcGFyc2VkUXVlcnlba2V5XSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKGNhc3RRdWVyeVBhcmFtVmFsdWUpIDogY2FzdFF1ZXJ5UGFyYW1WYWx1ZSh2YWx1ZSk7CiAgfQoKICByZXR1cm4gcGFyc2VkUXVlcnk7Cn0KCnZhciBjYXN0UXVlcnlQYXJhbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKTsKfTsKCmZ1bmN0aW9uIHBhcnNlUXVlcnkocXVlcnkpIHsKICB2YXIgcmVzID0ge307CiAgcXVlcnkgPSBxdWVyeS50cmltKCkucmVwbGFjZSgvXihcP3wjfCYpLywgJycpOwoKICBpZiAoIXF1ZXJ5KSB7CiAgICByZXR1cm4gcmVzOwogIH0KCiAgcXVlcnkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkgewogICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXCsvZywgJyAnKS5zcGxpdCgnPScpOwogICAgdmFyIGtleSA9IGRlY29kZShwYXJ0cy5zaGlmdCgpKTsKICAgIHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwID8gZGVjb2RlKHBhcnRzLmpvaW4oJz0nKSkgOiBudWxsOwoKICAgIGlmIChyZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJlc1trZXldID0gdmFsOwogICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkgewogICAgICByZXNba2V5XS5wdXNoKHZhbCk7CiAgICB9IGVsc2UgewogICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTsKICAgIH0KICB9KTsKICByZXR1cm4gcmVzOwp9CgpmdW5jdGlvbiBzdHJpbmdpZnlRdWVyeShvYmopIHsKICB2YXIgcmVzID0gb2JqID8gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgdmFyIHZhbCA9IG9ialtrZXldOwoKICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gJyc7CiAgICB9CgogICAgaWYgKHZhbCA9PT0gbnVsbCkgewogICAgICByZXR1cm4gZW5jb2RlKGtleSk7CiAgICB9CgogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgewogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwyKSB7CiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHZhbDIgPT09IG51bGwpIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsMikpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuam9pbignJicpOwogICAgfQoKICAgIHJldHVybiBlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwpOwogIH0pLmZpbHRlcihmdW5jdGlvbiAoeCkgewogICAgcmV0dXJuIHgubGVuZ3RoID4gMDsKICB9KS5qb2luKCcmJykgOiBudWxsOwogIHJldHVybiByZXMgPyAiPyIgKyByZXMgOiAnJzsKfQovKiAgKi8KCgp2YXIgdHJhaWxpbmdTbGFzaFJFID0gL1wvPyQvOwoKZnVuY3Rpb24gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcikgewogIHZhciBzdHJpbmdpZnlRdWVyeSA9IHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5zdHJpbmdpZnlRdWVyeTsKICB2YXIgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeSB8fCB7fTsKCiAgdHJ5IHsKICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpOwogIH0gY2F0Y2ggKGUpIHt9CgogIHZhciByb3V0ZSA9IHsKICAgIG5hbWU6IGxvY2F0aW9uLm5hbWUgfHwgcmVjb3JkICYmIHJlY29yZC5uYW1lLAogICAgbWV0YTogcmVjb3JkICYmIHJlY29yZC5tZXRhIHx8IHt9LAogICAgcGF0aDogbG9jYXRpb24ucGF0aCB8fCAnLycsCiAgICBoYXNoOiBsb2NhdGlvbi5oYXNoIHx8ICcnLAogICAgcXVlcnk6IHF1ZXJ5LAogICAgcGFyYW1zOiBsb2NhdGlvbi5wYXJhbXMgfHwge30sCiAgICBmdWxsUGF0aDogZ2V0RnVsbFBhdGgobG9jYXRpb24sIHN0cmluZ2lmeVF1ZXJ5KSwKICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXQogIH07CgogIGlmIChyZWRpcmVjdGVkRnJvbSkgewogICAgcm91dGUucmVkaXJlY3RlZEZyb20gPSBnZXRGdWxsUGF0aChyZWRpcmVjdGVkRnJvbSwgc3RyaW5naWZ5UXVlcnkpOwogIH0KCiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpOwp9CgpmdW5jdGlvbiBjbG9uZSh2YWx1ZSkgewogIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgcmV0dXJuIHZhbHVlLm1hcChjbG9uZSk7CiAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7CiAgICB2YXIgcmVzID0ge307CgogICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7CiAgICAgIHJlc1trZXldID0gY2xvbmUodmFsdWVba2V5XSk7CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9IGVsc2UgewogICAgcmV0dXJuIHZhbHVlOwogIH0KfSAvLyB0aGUgc3RhcnRpbmcgcm91dGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlCgoKdmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwgewogIHBhdGg6ICcvJwp9KTsKCmZ1bmN0aW9uIGZvcm1hdE1hdGNoKHJlY29yZCkgewogIHZhciByZXMgPSBbXTsKCiAgd2hpbGUgKHJlY29yZCkgewogICAgcmVzLnVuc2hpZnQocmVjb3JkKTsKICAgIHJlY29yZCA9IHJlY29yZC5wYXJlbnQ7CiAgfQoKICByZXR1cm4gcmVzOwp9CgpmdW5jdGlvbiBnZXRGdWxsUGF0aChyZWYsIF9zdHJpbmdpZnlRdWVyeSkgewogIHZhciBwYXRoID0gcmVmLnBhdGg7CiAgdmFyIHF1ZXJ5ID0gcmVmLnF1ZXJ5OwogIGlmIChxdWVyeSA9PT0gdm9pZCAwKSBxdWVyeSA9IHt9OwogIHZhciBoYXNoID0gcmVmLmhhc2g7CiAgaWYgKGhhc2ggPT09IHZvaWQgMCkgaGFzaCA9ICcnOwogIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7CiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyBzdHJpbmdpZnkocXVlcnkpICsgaGFzaDsKfQoKZnVuY3Rpb24gaXNTYW1lUm91dGUoYSwgYiwgb25seVBhdGgpIHsKICBpZiAoYiA9PT0gU1RBUlQpIHsKICAgIHJldHVybiBhID09PSBiOwogIH0gZWxzZSBpZiAoIWIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9IGVsc2UgaWYgKGEucGF0aCAmJiBiLnBhdGgpIHsKICAgIHJldHVybiBhLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSA9PT0gYi5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgJiYgKG9ubHlQYXRoIHx8IGEuaGFzaCA9PT0gYi5oYXNoICYmIGlzT2JqZWN0RXF1YWwoYS5xdWVyeSwgYi5xdWVyeSkpOwogIH0gZWxzZSBpZiAoYS5uYW1lICYmIGIubmFtZSkgewogICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lICYmIChvbmx5UGF0aCB8fCBhLmhhc2ggPT09IGIuaGFzaCAmJiBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmIGlzT2JqZWN0RXF1YWwoYS5wYXJhbXMsIGIucGFyYW1zKSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBmYWxzZTsKICB9Cn0KCmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwoYSwgYikgewogIGlmIChhID09PSB2b2lkIDApIGEgPSB7fTsKICBpZiAoYiA9PT0gdm9pZCAwKSBiID0ge307IC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2CgogIGlmICghYSB8fCAhYikgewogICAgcmV0dXJuIGEgPT09IGI7CiAgfQoKICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKS5zb3J0KCk7CiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpOwoKICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5LCBpKSB7CiAgICB2YXIgYVZhbCA9IGFba2V5XTsKICAgIHZhciBiS2V5ID0gYktleXNbaV07CgogICAgaWYgKGJLZXkgIT09IGtleSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgdmFyIGJWYWwgPSBiW2tleV07IC8vIHF1ZXJ5IHZhbHVlcyBjYW4gYmUgbnVsbCBhbmQgdW5kZWZpbmVkCgogICAgaWYgKGFWYWwgPT0gbnVsbCB8fCBiVmFsID09IG51bGwpIHsKICAgICAgcmV0dXJuIGFWYWwgPT09IGJWYWw7CiAgICB9IC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eQoKCiAgICBpZiAodHlwZW9mIGFWYWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiVmFsID09PSAnb2JqZWN0JykgewogICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKTsKICAgIH0KCiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbCk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCB0YXJnZXQpIHsKICByZXR1cm4gY3VycmVudC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpLmluZGV4T2YodGFyZ2V0LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykpID09PSAwICYmICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiYgcXVlcnlJbmNsdWRlcyhjdXJyZW50LnF1ZXJ5LCB0YXJnZXQucXVlcnkpOwp9CgpmdW5jdGlvbiBxdWVyeUluY2x1ZGVzKGN1cnJlbnQsIHRhcmdldCkgewogIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHsKICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5tYXRjaGVkLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgcmVjb3JkID0gcm91dGUubWF0Y2hlZFtpXTsKCiAgICBmb3IgKHZhciBuYW1lIGluIHJlY29yZC5pbnN0YW5jZXMpIHsKICAgICAgdmFyIGluc3RhbmNlID0gcmVjb3JkLmluc3RhbmNlc1tuYW1lXTsKICAgICAgdmFyIGNicyA9IHJlY29yZC5lbnRlcmVkQ2JzW25hbWVdOwoKICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhY2JzKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGRlbGV0ZSByZWNvcmQuZW50ZXJlZENic1tuYW1lXTsKCiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5sZW5ndGg7IGkkMSsrKSB7CiAgICAgICAgaWYgKCFpbnN0YW5jZS5faXNCZWluZ0Rlc3Ryb3llZCkgewogICAgICAgICAgY2JzW2kkMV0oaW5zdGFuY2UpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKdmFyIFZpZXcgPSB7CiAgbmFtZTogJ1JvdXRlclZpZXcnLAogIGZ1bmN0aW9uYWw6IHRydWUsCiAgcHJvcHM6IHsKICAgIG5hbWU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnZGVmYXVsdCcKICAgIH0KICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKF8sIHJlZikgewogICAgdmFyIHByb3BzID0gcmVmLnByb3BzOwogICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuOwogICAgdmFyIHBhcmVudCA9IHJlZi5wYXJlbnQ7CiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhOyAvLyB1c2VkIGJ5IGRldnRvb2xzIHRvIGRpc3BsYXkgYSByb3V0ZXItdmlldyBiYWRnZQoKICAgIGRhdGEucm91dGVyVmlldyA9IHRydWU7IC8vIGRpcmVjdGx5IHVzZSBwYXJlbnQgY29udGV4dCdzIGNyZWF0ZUVsZW1lbnQoKSBmdW5jdGlvbgogICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzCgogICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7CiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7CiAgICB2YXIgcm91dGUgPSBwYXJlbnQuJHJvdXRlOwogICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pOyAvLyBkZXRlcm1pbmUgY3VycmVudCB2aWV3IGRlcHRoLCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHJlZQogICAgLy8gaGFzIGJlZW4gdG9nZ2xlZCBpbmFjdGl2ZSBidXQga2VwdC1hbGl2ZS4KCiAgICB2YXIgZGVwdGggPSAwOwogICAgdmFyIGluYWN0aXZlID0gZmFsc2U7CgogICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkgewogICAgICB2YXIgdm5vZGVEYXRhID0gcGFyZW50LiR2bm9kZSA/IHBhcmVudC4kdm5vZGUuZGF0YSA6IHt9OwoKICAgICAgaWYgKHZub2RlRGF0YS5yb3V0ZXJWaWV3KSB7CiAgICAgICAgZGVwdGgrKzsKICAgICAgfQoKICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9kaXJlY3RJbmFjdGl2ZSAmJiBwYXJlbnQuX2luYWN0aXZlKSB7CiAgICAgICAgaW5hY3RpdmUgPSB0cnVlOwogICAgICB9CgogICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDsKICAgIH0KCiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoOyAvLyByZW5kZXIgcHJldmlvdXMgdmlldyBpZiB0aGUgdHJlZSBpcyBpbmFjdGl2ZSBhbmQga2VwdC1hbGl2ZQoKICAgIGlmIChpbmFjdGl2ZSkgewogICAgICB2YXIgY2FjaGVkRGF0YSA9IGNhY2hlW25hbWVdOwogICAgICB2YXIgY2FjaGVkQ29tcG9uZW50ID0gY2FjaGVkRGF0YSAmJiBjYWNoZWREYXRhLmNvbXBvbmVudDsKCiAgICAgIGlmIChjYWNoZWRDb21wb25lbnQpIHsKICAgICAgICAvLyAjMjMwMQogICAgICAgIC8vIHBhc3MgcHJvcHMKICAgICAgICBpZiAoY2FjaGVkRGF0YS5jb25maWdQcm9wcykgewogICAgICAgICAgZmlsbFByb3BzaW5EYXRhKGNhY2hlZENvbXBvbmVudCwgZGF0YSwgY2FjaGVkRGF0YS5yb3V0ZSwgY2FjaGVkRGF0YS5jb25maWdQcm9wcyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaChjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByZW5kZXIgcHJldmlvdXMgZW1wdHkgdmlldwogICAgICAgIHJldHVybiBoKCk7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdOwogICAgdmFyIGNvbXBvbmVudCA9IG1hdGNoZWQgJiYgbWF0Y2hlZC5jb21wb25lbnRzW25hbWVdOyAvLyByZW5kZXIgZW1wdHkgbm9kZSBpZiBubyBtYXRjaGVkIHJvdXRlIG9yIG5vIGNvbmZpZyBjb21wb25lbnQKCiAgICBpZiAoIW1hdGNoZWQgfHwgIWNvbXBvbmVudCkgewogICAgICBjYWNoZVtuYW1lXSA9IG51bGw7CiAgICAgIHJldHVybiBoKCk7CiAgICB9IC8vIGNhY2hlIGNvbXBvbmVudAoKCiAgICBjYWNoZVtuYW1lXSA9IHsKICAgICAgY29tcG9uZW50OiBjb21wb25lbnQKICAgIH07IC8vIGF0dGFjaCBpbnN0YW5jZSByZWdpc3RyYXRpb24gaG9vawogICAgLy8gdGhpcyB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgaW5zdGFuY2UncyBpbmplY3RlZCBsaWZlY3ljbGUgaG9va3MKCiAgICBkYXRhLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgdmFsKSB7CiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uCiAgICAgIHZhciBjdXJyZW50ID0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV07CgogICAgICBpZiAodmFsICYmIGN1cnJlbnQgIT09IHZtIHx8ICF2YWwgJiYgY3VycmVudCA9PT0gdm0pIHsKICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDsKICAgICAgfQogICAgfSAvLyBhbHNvIHJlZ2lzdGVyIGluc3RhbmNlIGluIHByZXBhdGNoIGhvb2sKICAgIC8vIGluIGNhc2UgdGhlIHNhbWUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBhY3Jvc3MgZGlmZmVyZW50IHJvdXRlcwogICAgOwoKICAgIChkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KSkucHJlcGF0Y2ggPSBmdW5jdGlvbiAoXywgdm5vZGUpIHsKICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTsKICAgIH07IC8vIHJlZ2lzdGVyIGluc3RhbmNlIGluIGluaXQgaG9vawogICAgLy8gaW4gY2FzZSBrZXB0LWFsaXZlIGNvbXBvbmVudCBiZSBhY3RpdmVkIHdoZW4gcm91dGVzIGNoYW5nZWQKCgogICAgZGF0YS5ob29rLmluaXQgPSBmdW5jdGlvbiAodm5vZGUpIHsKICAgICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlICYmIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICE9PSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSkgewogICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CiAgICAgIH0gLy8gaWYgdGhlIHJvdXRlIHRyYW5zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBjb25maXJtZWQgdGhlbiB3ZSB3ZXJlbid0CiAgICAgIC8vIGFibGUgdG8gY2FsbCB0aGUgY2JzIGR1cmluZyBjb25maXJtYXRpb24gYXMgdGhlIGNvbXBvbmVudCB3YXMgbm90CiAgICAgIC8vIHJlZ2lzdGVyZWQgeWV0LCBzbyB3ZSBjYWxsIGl0IGhlcmUuCgoKICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTsKICAgIH07CgogICAgdmFyIGNvbmZpZ1Byb3BzID0gbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdOyAvLyBzYXZlIHJvdXRlIGFuZCBjb25maWdQcm9wcyBpbiBjYWNoZQoKICAgIGlmIChjb25maWdQcm9wcykgewogICAgICBleHRlbmQoY2FjaGVbbmFtZV0sIHsKICAgICAgICByb3V0ZTogcm91dGUsCiAgICAgICAgY29uZmlnUHJvcHM6IGNvbmZpZ1Byb3BzCiAgICAgIH0pOwogICAgICBmaWxsUHJvcHNpbkRhdGEoY29tcG9uZW50LCBkYXRhLCByb3V0ZSwgY29uZmlnUHJvcHMpOwogICAgfQoKICAgIHJldHVybiBoKGNvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pOwogIH0KfTsKCmZ1bmN0aW9uIGZpbGxQcm9wc2luRGF0YShjb21wb25lbnQsIGRhdGEsIHJvdXRlLCBjb25maWdQcm9wcykgewogIC8vIHJlc29sdmUgcHJvcHMKICB2YXIgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gcmVzb2x2ZVByb3BzKHJvdXRlLCBjb25maWdQcm9wcyk7CgogIGlmIChwcm9wc1RvUGFzcykgewogICAgLy8gY2xvbmUgdG8gcHJldmVudCBtdXRhdGlvbgogICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7IC8vIHBhc3Mgbm9uLWRlY2xhcmVkIHByb3BzIGFzIGF0dHJzCgogICAgdmFyIGF0dHJzID0gZGF0YS5hdHRycyA9IGRhdGEuYXR0cnMgfHwge307CgogICAgZm9yICh2YXIga2V5IGluIHByb3BzVG9QYXNzKSB7CiAgICAgIGlmICghY29tcG9uZW50LnByb3BzIHx8ICEoa2V5IGluIGNvbXBvbmVudC5wcm9wcykpIHsKICAgICAgICBhdHRyc1trZXldID0gcHJvcHNUb1Bhc3Nba2V5XTsKICAgICAgICBkZWxldGUgcHJvcHNUb1Bhc3Nba2V5XTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gcmVzb2x2ZVByb3BzKHJvdXRlLCBjb25maWcpIHsKICBzd2l0Y2ggKHR5cGVvZiBjb25maWcpIHsKICAgIGNhc2UgJ3VuZGVmaW5lZCc6CiAgICAgIHJldHVybjsKCiAgICBjYXNlICdvYmplY3QnOgogICAgICByZXR1cm4gY29uZmlnOwoKICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSk7CgogICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWQ7CgogICAgZGVmYXVsdDoKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKGZhbHNlLCAicHJvcHMgaW4gXCIiICsgcm91dGUucGF0aCArICJcIiBpcyBhICIgKyB0eXBlb2YgY29uZmlnICsgIiwgIiArICJleHBlY3RpbmcgYW4gb2JqZWN0LCBmdW5jdGlvbiBvciBib29sZWFuLiIpOwogICAgICB9CgogIH0KfQovKiAgKi8KCgpmdW5jdGlvbiByZXNvbHZlUGF0aChyZWxhdGl2ZSwgYmFzZSwgYXBwZW5kKSB7CiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTsKCiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7CiAgICByZXR1cm4gcmVsYXRpdmU7CiAgfQoKICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHsKICAgIHJldHVybiBiYXNlICsgcmVsYXRpdmU7CiAgfQoKICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7IC8vIHJlbW92ZSB0cmFpbGluZyBzZWdtZW50IGlmOgogIC8vIC0gbm90IGFwcGVuZGluZwogIC8vIC0gYXBwZW5kaW5nIHRvIHRyYWlsaW5nIHNsYXNoIChsYXN0IHNlZ21lbnQgaXMgZW1wdHkpCgogIGlmICghYXBwZW5kIHx8ICFzdGFja1tzdGFjay5sZW5ndGggLSAxXSkgewogICAgc3RhY2sucG9wKCk7CiAgfSAvLyByZXNvbHZlIHJlbGF0aXZlIHBhdGgKCgogIHZhciBzZWdtZW50cyA9IHJlbGF0aXZlLnJlcGxhY2UoL15cLy8sICcnKS5zcGxpdCgnLycpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldOwoKICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7CiAgICAgIHN0YWNrLnBvcCgpOwogICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSAnLicpIHsKICAgICAgc3RhY2sucHVzaChzZWdtZW50KTsKICAgIH0KICB9IC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoCgoKICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7CiAgICBzdGFjay51bnNoaWZ0KCcnKTsKICB9CgogIHJldHVybiBzdGFjay5qb2luKCcvJyk7Cn0KCmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7CiAgdmFyIGhhc2ggPSAnJzsKICB2YXIgcXVlcnkgPSAnJzsKICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7CgogIGlmIChoYXNoSW5kZXggPj0gMCkgewogICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4KTsKICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGhhc2hJbmRleCk7CiAgfQoKICB2YXIgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpOwoKICBpZiAocXVlcnlJbmRleCA+PSAwKSB7CiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpOwogICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgcXVlcnlJbmRleCk7CiAgfQoKICByZXR1cm4gewogICAgcGF0aDogcGF0aCwKICAgIHF1ZXJ5OiBxdWVyeSwKICAgIGhhc2g6IGhhc2gKICB9Owp9CgpmdW5jdGlvbiBjbGVhblBhdGgocGF0aCkgewogIHJldHVybiBwYXRoLnJlcGxhY2UoL1wvKD86XHMqXC8pKy9nLCAnLycpOwp9Cgp2YXIgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nOwp9OwovKioKICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLgogKi8KCgp2YXIgcGF0aFRvUmVnZXhwXzEgPSBwYXRoVG9SZWdleHA7CnZhciBwYXJzZV8xID0gcGFyc2U7CnZhciBjb21waWxlXzEgPSBjb21waWxlOwp2YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjsKdmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDsKLyoqCiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuCiAqCiAqIEB0eXBlIHtSZWdFeHB9CiAqLwoKdmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy4KLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS4KJyhcXFxcLiknLCAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeAovLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOgovLwovLyAiLzp0ZXN0KFxcZCspPyIgPT4gWyIvIiwgInRlc3QiLCAiXGQrIiwgdW5kZWZpbmVkLCAiPyIsIHVuZGVmaW5lZF0KLy8gIi9yb3V0ZShcXGQrKSIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAiXGQrIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdCi8vICIvKiIgICAgICAgICAgICA9PiBbIi8iLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsICIqIl0KJyhbXFwvLl0pPyg/Oig/OlxcOihcXHcrKSg/OlxcKCgoPzpcXFxcLnxbXlxcXFwoKV0pKylcXCkpP3xcXCgoKD86XFxcXC58W15cXFxcKCldKSspXFwpKShbKyo/XSk/fChcXCopKSddLmpvaW4oJ3wnKSwgJ2cnKTsKLyoqCiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy4KICoKICogQHBhcmFtICB7c3RyaW5nfSAgc3RyCiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnMKICogQHJldHVybiB7IUFycmF5fQogKi8KCmZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0aW9ucykgewogIHZhciB0b2tlbnMgPSBbXTsKICB2YXIga2V5ID0gMDsKICB2YXIgaW5kZXggPSAwOwogIHZhciBwYXRoID0gJyc7CiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJzsKICB2YXIgcmVzOwoKICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkgewogICAgdmFyIG0gPSByZXNbMF07CiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXTsKICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7CiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTsKICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGg7IC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLgoKICAgIGlmIChlc2NhcGVkKSB7CiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdOwogICAgdmFyIHByZWZpeCA9IHJlc1syXTsKICAgIHZhciBuYW1lID0gcmVzWzNdOwogICAgdmFyIGNhcHR1cmUgPSByZXNbNF07CiAgICB2YXIgZ3JvdXAgPSByZXNbNV07CiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07CiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107IC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuCgogICAgaWYgKHBhdGgpIHsKICAgICAgdG9rZW5zLnB1c2gocGF0aCk7CiAgICAgIHBhdGggPSAnJzsKICAgIH0KCiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7CiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonOwogICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonOwogICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyOwogICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwOwogICAgdG9rZW5zLnB1c2goewogICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLAogICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJywKICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsCiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCwKICAgICAgcmVwZWF0OiByZXBlYXQsCiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsCiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLAogICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiBhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JwogICAgfSk7CiAgfSAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuCgoKICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7CiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpOwogIH0gLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC4KCgogIGlmIChwYXRoKSB7CiAgICB0b2tlbnMucHVzaChwYXRoKTsKICB9CgogIHJldHVybiB0b2tlbnM7Cn0KLyoqCiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguCiAqCiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyCiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9ucwogKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9CiAqLwoKCmZ1bmN0aW9uIGNvbXBpbGUoc3RyLCBvcHRpb25zKSB7CiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucyk7Cn0KLyoqCiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLgogKgogKiBAcGFyYW0gIHtzdHJpbmd9CiAqIEByZXR1cm4ge3N0cmluZ30KICovCgoKZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5KHN0cikgewogIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXC8/I10vZywgZnVuY3Rpb24gKGMpIHsKICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7CiAgfSk7Cn0KLyoqCiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuCiAqCiAqIEBwYXJhbSAge3N0cmluZ30KICogQHJldHVybiB7c3RyaW5nfQogKi8KCgpmdW5jdGlvbiBlbmNvZGVBc3RlcmlzayhzdHIpIHsKICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykgewogICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsKICB9KTsKfQovKioKICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24odG9rZW5zLCBvcHRpb25zKSB7CiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuCiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7IC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uCgogIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHsKICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSk7CiAgICB9CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykgewogICAgdmFyIHBhdGggPSAnJzsKICAgIHZhciBkYXRhID0gb2JqIHx8IHt9OwogICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9OwogICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTsKCiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgcGF0aCArPSB0b2tlbjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXTsKICAgICAgdmFyIHNlZ21lbnQ7CgogICAgICBpZiAodmFsdWUgPT0gbnVsbCkgewogICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkgewogICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuCiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkgewogICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDsKICAgICAgICAgIH0KCiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgIicgKyB0b2tlbi5uYW1lICsgJyIgdG8gYmUgZGVmaW5lZCcpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7CiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHsKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICInICsgdG9rZW4ubmFtZSArICciIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAiJyArIHRva2VuLm5hbWUgKyAnIiB0byBub3QgYmUgZW1wdHknKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pOwoKICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCAiJyArIHRva2VuLm5hbWUgKyAnIiB0byBtYXRjaCAiJyArIHRva2VuLnBhdHRlcm4gKyAnIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpOwogICAgICAgICAgfQoKICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDsKICAgICAgICB9CgogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpOwoKICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAiJyArIHRva2VuLm5hbWUgKyAnIiB0byBtYXRjaCAiJyArIHRva2VuLnBhdHRlcm4gKyAnIiwgYnV0IHJlY2VpdmVkICInICsgc2VnbWVudCArICciJyk7CiAgICAgIH0KCiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudDsKICAgIH0KCiAgICByZXR1cm4gcGF0aDsKICB9Owp9Ci8qKgogKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLgogKgogKiBAcGFyYW0gIHtzdHJpbmd9IHN0cgogKiBAcmV0dXJuIHtzdHJpbmd9CiAqLwoKCmZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHIpIHsKICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXXxcL1xcXSkvZywgJ1xcJDEnKTsKfQovKioKICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLgogKgogKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwCiAqIEByZXR1cm4ge3N0cmluZ30KICovCgoKZnVuY3Rpb24gZXNjYXBlR3JvdXAoZ3JvdXApIHsKICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXC8oKV0pL2csICdcXCQxJyk7Cn0KLyoqCiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuCiAqCiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlCiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXMKICogQHJldHVybiB7IVJlZ0V4cH0KICovCgoKZnVuY3Rpb24gYXR0YWNoS2V5cyhyZSwga2V5cykgewogIHJlLmtleXMgPSBrZXlzOwogIHJldHVybiByZTsKfQovKioKICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy4KICoKICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zCiAqIEByZXR1cm4ge3N0cmluZ30KICovCgoKZnVuY3Rpb24gZmxhZ3Mob3B0aW9ucykgewogIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSc7Cn0KLyoqCiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC4KICoKICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aAogKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzCiAqIEByZXR1cm4geyFSZWdFeHB9CiAqLwoKCmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIGtleXMpIHsKICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLgogIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXCgoPyFcPykvZyk7CgogIGlmIChncm91cHMpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleXMucHVzaCh7CiAgICAgICAgbmFtZTogaSwKICAgICAgICBwcmVmaXg6IG51bGwsCiAgICAgICAgZGVsaW1pdGVyOiBudWxsLAogICAgICAgIG9wdGlvbmFsOiBmYWxzZSwKICAgICAgICByZXBlYXQ6IGZhbHNlLAogICAgICAgIHBhcnRpYWw6IGZhbHNlLAogICAgICAgIGFzdGVyaXNrOiBmYWxzZSwKICAgICAgICBwYXR0ZXJuOiBudWxsCiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cyk7Cn0KLyoqCiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLgogKgogKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoCiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXMKICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9ucwogKiBAcmV0dXJuIHshUmVnRXhwfQogKi8KCgpmdW5jdGlvbiBhcnJheVRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpIHsKICB2YXIgcGFydHMgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7CiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpOwogIH0KCiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKTsKICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpOwp9Ci8qKgogKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC4KICoKICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aAogKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzCiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnMKICogQHJldHVybiB7IVJlZ0V4cH0KICovCgoKZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucykgewogIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucyk7Cn0KLyoqCiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuCiAqCiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zCiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5cwogKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnMKICogQHJldHVybiB7IVJlZ0V4cH0KICovCgoKZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7CiAgaWYgKCFpc2FycmF5KGtleXMpKSB7CiAgICBvcHRpb25zID0KICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8KICAgIGtleXMgfHwgb3B0aW9uczsKICAgIGtleXMgPSBbXTsKICB9CgogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDsKICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlOwogIHZhciByb3V0ZSA9ICcnOyAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLgoKICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgdmFyIHRva2VuID0gdG9rZW5zW2ldOwoKICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7CiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbik7CiAgICB9IGVsc2UgewogICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7CiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknOwogICAgICBrZXlzLnB1c2godG9rZW4pOwoKICAgICAgaWYgKHRva2VuLnJlcGVhdCkgewogICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJzsKICAgICAgfQoKICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7CiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7CiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/JzsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSc7CiAgICAgIH0KCiAgICAgIHJvdXRlICs9IGNhcHR1cmU7CiAgICB9CiAgfQoKICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7CiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXI7IC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvCiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoCiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudAogIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgIi90ZXN0LyIgc2hvdWxkbid0IG1hdGNoICIvdGVzdC8vcm91dGUiLgoKICBpZiAoIXN0cmljdCkgewogICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/JzsKICB9CgogIGlmIChlbmQpIHsKICAgIHJvdXRlICs9ICckJzsKICB9IGVsc2UgewogICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXMKICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuCiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSc7CiAgfQoKICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpOwp9Ci8qKgogKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uCiAqCiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlCiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGwKICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuCiAqCiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aAogKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXMKICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zCiAqIEByZXR1cm4geyFSZWdFeHB9CiAqLwoKCmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7CiAgaWYgKCFpc2FycmF5KGtleXMpKSB7CiAgICBvcHRpb25zID0KICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8KICAgIGtleXMgfHwgb3B0aW9uczsKICAgIGtleXMgPSBbXTsKICB9CgogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkgewogICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsCiAgICAvKiogQHR5cGUgeyFBcnJheX0gKi8KICAgIGtleXMpOwogIH0KCiAgaWYgKGlzYXJyYXkocGF0aCkpIHsKICAgIHJldHVybiBhcnJheVRvUmVnZXhwKAogICAgLyoqIEB0eXBlIHshQXJyYXl9ICovCiAgICBwYXRoLAogICAgLyoqIEB0eXBlIHshQXJyYXl9ICovCiAgICBrZXlzLCBvcHRpb25zKTsKICB9CgogIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgKICAvKiogQHR5cGUge3N0cmluZ30gKi8KICBwYXRoLAogIC8qKiBAdHlwZSB7IUFycmF5fSAqLwogIGtleXMsIG9wdGlvbnMpOwp9CgpwYXRoVG9SZWdleHBfMS5wYXJzZSA9IHBhcnNlXzE7CnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7CnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXzE7CnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBfMTsKLyogICovCi8vICRmbG93LWRpc2FibGUtbGluZQoKdmFyIHJlZ2V4cENvbXBpbGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgpmdW5jdGlvbiBmaWxsUGFyYW1zKHBhdGgsIHBhcmFtcywgcm91dGVNc2cpIHsKICBwYXJhbXMgPSBwYXJhbXMgfHwge307CgogIHRyeSB7CiAgICB2YXIgZmlsbGVyID0gcmVnZXhwQ29tcGlsZUNhY2hlW3BhdGhdIHx8IChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTsgLy8gRml4ICMyNTA1IHJlc29sdmluZyBhc3RlcmlzayByb3V0ZXMgeyBuYW1lOiAnbm90LWZvdW5kJywgcGFyYW1zOiB7IHBhdGhNYXRjaDogJy9ub3QtZm91bmQnIH19CiAgICAvLyBhbmQgZml4ICMzMTA2IHNvIHRoYXQgeW91IGNhbiB3b3JrIHdpdGggbG9jYXRpb24gZGVzY3JpcHRvciBvYmplY3QgaGF2aW5nIHBhcmFtcy5wYXRoTWF0Y2ggZXF1YWwgdG8gZW1wdHkgc3RyaW5nCgogICAgaWYgKHR5cGVvZiBwYXJhbXMucGF0aE1hdGNoID09PSAnc3RyaW5nJykgewogICAgICBwYXJhbXNbMF0gPSBwYXJhbXMucGF0aE1hdGNoOwogICAgfQoKICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7CiAgICAgIHByZXR0eTogdHJ1ZQogICAgfSk7CiAgfSBjYXRjaCAoZSkgewogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgLy8gRml4ICMzMDcyIG5vIHdhcm4gaWYgYHBhdGhNYXRjaGAgaXMgc3RyaW5nCiAgICAgIHdhcm4odHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnLCAibWlzc2luZyBwYXJhbSBmb3IgIiArIHJvdXRlTXNnICsgIjogIiArIGUubWVzc2FnZSk7CiAgICB9CgogICAgcmV0dXJuICcnOwogIH0gZmluYWxseSB7CiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkCiAgICBkZWxldGUgcGFyYW1zWzBdOwogIH0KfQovKiAgKi8KCgpmdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbihyYXcsIGN1cnJlbnQsIGFwcGVuZCwgcm91dGVyKSB7CiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsKICAgIHBhdGg6IHJhdwogIH0gOiByYXc7IC8vIG5hbWVkIHRhcmdldAoKICBpZiAobmV4dC5fbm9ybWFsaXplZCkgewogICAgcmV0dXJuIG5leHQ7CiAgfSBlbHNlIGlmIChuZXh0Lm5hbWUpIHsKICAgIG5leHQgPSBleHRlbmQoe30sIHJhdyk7CiAgICB2YXIgcGFyYW1zID0gbmV4dC5wYXJhbXM7CgogICAgaWYgKHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0JykgewogICAgICBuZXh0LnBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTsKICAgIH0KCiAgICByZXR1cm4gbmV4dDsKICB9IC8vIHJlbGF0aXZlIHBhcmFtcwoKCiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkgewogICAgbmV4dCA9IGV4dGVuZCh7fSwgbmV4dCk7CiAgICBuZXh0Ll9ub3JtYWxpemVkID0gdHJ1ZTsKICAgIHZhciBwYXJhbXMkMSA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpOwoKICAgIGlmIChjdXJyZW50Lm5hbWUpIHsKICAgICAgbmV4dC5uYW1lID0gY3VycmVudC5uYW1lOwogICAgICBuZXh0LnBhcmFtcyA9IHBhcmFtcyQxOwogICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7CiAgICAgIHZhciByYXdQYXRoID0gY3VycmVudC5tYXRjaGVkW2N1cnJlbnQubWF0Y2hlZC5sZW5ndGggLSAxXS5wYXRoOwogICAgICBuZXh0LnBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcyQxLCAicGF0aCAiICsgY3VycmVudC5wYXRoKTsKICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICB3YXJuKGZhbHNlLCAicmVsYXRpdmUgcGFyYW1zIG5hdmlnYXRpb24gcmVxdWlyZXMgYSBjdXJyZW50IHJvdXRlLiIpOwogICAgfQoKICAgIHJldHVybiBuZXh0OwogIH0KCiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTsKICB2YXIgYmFzZVBhdGggPSBjdXJyZW50ICYmIGN1cnJlbnQucGF0aCB8fCAnLyc7CiAgdmFyIHBhdGggPSBwYXJzZWRQYXRoLnBhdGggPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpIDogYmFzZVBhdGg7CiAgdmFyIHF1ZXJ5ID0gcmVzb2x2ZVF1ZXJ5KHBhcnNlZFBhdGgucXVlcnksIG5leHQucXVlcnksIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5KTsKICB2YXIgaGFzaCA9IG5leHQuaGFzaCB8fCBwYXJzZWRQYXRoLmhhc2g7CgogIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIHsKICAgIGhhc2ggPSAiIyIgKyBoYXNoOwogIH0KCiAgcmV0dXJuIHsKICAgIF9ub3JtYWxpemVkOiB0cnVlLAogICAgcGF0aDogcGF0aCwKICAgIHF1ZXJ5OiBxdWVyeSwKICAgIGhhc2g6IGhhc2gKICB9Owp9Ci8qICAqLwovLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1ZwoKCnZhciB0b1R5cGVzID0gW1N0cmluZywgT2JqZWN0XTsKdmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07Cgp2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9OwoKdmFyIHdhcm5lZEN1c3RvbVNsb3Q7CnZhciB3YXJuZWRUYWdQcm9wOwp2YXIgd2FybmVkRXZlbnRQcm9wOwp2YXIgTGluayA9IHsKICBuYW1lOiAnUm91dGVyTGluaycsCiAgcHJvcHM6IHsKICAgIHRvOiB7CiAgICAgIHR5cGU6IHRvVHlwZXMsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgdGFnOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ2EnCiAgICB9LAogICAgY3VzdG9tOiBCb29sZWFuLAogICAgZXhhY3Q6IEJvb2xlYW4sCiAgICBleGFjdFBhdGg6IEJvb2xlYW4sCiAgICBhcHBlbmQ6IEJvb2xlYW4sCiAgICByZXBsYWNlOiBCb29sZWFuLAogICAgYWN0aXZlQ2xhc3M6IFN0cmluZywKICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZywKICAgIGFyaWFDdXJyZW50VmFsdWU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAncGFnZScKICAgIH0sCiAgICBldmVudDogewogICAgICB0eXBlOiBldmVudFR5cGVzLAogICAgICBkZWZhdWx0OiAnY2xpY2snCiAgICB9CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzOwogICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjsKICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7CiAgICB2YXIgcmVmID0gcm91dGVyLnJlc29sdmUodGhpcy50bywgY3VycmVudCwgdGhpcy5hcHBlbmQpOwogICAgdmFyIGxvY2F0aW9uID0gcmVmLmxvY2F0aW9uOwogICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlOwogICAgdmFyIGhyZWYgPSByZWYuaHJlZjsKICAgIHZhciBjbGFzc2VzID0ge307CiAgICB2YXIgZ2xvYmFsQWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3M7CiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzOyAvLyBTdXBwb3J0IGdsb2JhbCBlbXB0eSBhY3RpdmUgY2xhc3MKCiAgICB2YXIgYWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGwgPyAncm91dGVyLWxpbmstYWN0aXZlJyA6IGdsb2JhbEFjdGl2ZUNsYXNzOwogICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbCA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnIDogZ2xvYmFsRXhhY3RBY3RpdmVDbGFzczsKICAgIHZhciBhY3RpdmVDbGFzcyA9IHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGFjdGl2ZUNsYXNzRmFsbGJhY2sgOiB0aGlzLmFjdGl2ZUNsYXNzOwogICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3MgPSB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA6IHRoaXMuZXhhY3RBY3RpdmVDbGFzczsKICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gcm91dGUucmVkaXJlY3RlZEZyb20gPyBjcmVhdGVSb3V0ZShudWxsLCBub3JtYWxpemVMb2NhdGlvbihyb3V0ZS5yZWRpcmVjdGVkRnJvbSksIG51bGwsIHJvdXRlcikgOiByb3V0ZTsKICAgIGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10gPSBpc1NhbWVSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0LCB0aGlzLmV4YWN0UGF0aCk7CiAgICBjbGFzc2VzW2FjdGl2ZUNsYXNzXSA9IHRoaXMuZXhhY3QgfHwgdGhpcy5leGFjdFBhdGggPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdIDogaXNJbmNsdWRlZFJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpOwogICAgdmFyIGFyaWFDdXJyZW50VmFsdWUgPSBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID8gdGhpcy5hcmlhQ3VycmVudFZhbHVlIDogbnVsbDsKCiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7CiAgICAgICAgaWYgKHRoaXMkMSQxLnJlcGxhY2UpIHsKICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uLCBub29wKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24sIG5vb3ApOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICB2YXIgb24gPSB7CiAgICAgIGNsaWNrOiBndWFyZEV2ZW50CiAgICB9OwoKICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7CiAgICAgIHRoaXMuZXZlbnQuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIG9uW2VdID0gaGFuZGxlcjsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBvblt0aGlzLmV2ZW50XSA9IGhhbmRsZXI7CiAgICB9CgogICAgdmFyIGRhdGEgPSB7CiAgICAgIGNsYXNzOiBjbGFzc2VzCiAgICB9OwogICAgdmFyIHNjb3BlZFNsb3QgPSAhdGhpcy4kc2NvcGVkU2xvdHMuJGhhc05vcm1hbCAmJiB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmIHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQoewogICAgICBocmVmOiBocmVmLAogICAgICByb3V0ZTogcm91dGUsCiAgICAgIG5hdmlnYXRlOiBoYW5kbGVyLAogICAgICBpc0FjdGl2ZTogY2xhc3Nlc1thY3RpdmVDbGFzc10sCiAgICAgIGlzRXhhY3RBY3RpdmU6IGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10KICAgIH0pOwoKICAgIGlmIChzY29wZWRTbG90KSB7CiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLmN1c3RvbSkgewogICAgICAgICF3YXJuZWRDdXN0b21TbG90ICYmIHdhcm4oZmFsc2UsICdJbiBWdWUgUm91dGVyIDQsIHRoZSB2LXNsb3QgQVBJIHdpbGwgYnkgZGVmYXVsdCB3cmFwIGl0cyBjb250ZW50IHdpdGggYW4gPGE+IGVsZW1lbnQuIFVzZSB0aGUgY3VzdG9tIHByb3AgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzpcbjxyb3V0ZXItbGluayB2LXNsb3Q9InsgbmF2aWdhdGUsIGhyZWYgfSIgY3VzdG9tPjwvcm91dGVyLWxpbms+XG4nKTsKICAgICAgICB3YXJuZWRDdXN0b21TbG90ID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID09PSAxKSB7CiAgICAgICAgcmV0dXJuIHNjb3BlZFNsb3RbMF07CiAgICAgIH0gZWxzZSBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPiAxIHx8ICFzY29wZWRTbG90Lmxlbmd0aCkgewogICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgICB3YXJuKGZhbHNlLCAiPHJvdXRlci1saW5rPiB3aXRoIHRvPVwiIiArIHRoaXMudG8gKyAiXCIgaXMgdHJ5aW5nIHRvIHVzZSBhIHNjb3BlZCBzbG90IGJ1dCBpdCBkaWRuJ3QgcHJvdmlkZSBleGFjdGx5IG9uZSBjaGlsZC4gV3JhcHBpbmcgdGhlIGNvbnRlbnQgd2l0aCBhIHNwYW4gZWxlbWVudC4iKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzY29wZWRTbG90Lmxlbmd0aCA9PT0gMCA/IGgoKSA6IGgoJ3NwYW4nLCB7fSwgc2NvcGVkU2xvdCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICBpZiAoJ3RhZycgaW4gdGhpcy4kb3B0aW9ucy5wcm9wc0RhdGEgJiYgIXdhcm5lZFRhZ1Byb3ApIHsKICAgICAgICB3YXJuKGZhbHNlLCAiPHJvdXRlci1saW5rPidzIHRhZyBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIFJvdXRlciA0LiBVc2UgdGhlIHYtc2xvdCBBUEkgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzogaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyNyZW1vdmFsLW9mLWV2ZW50LWFuZC10YWctcHJvcHMtaW4tcm91dGVyLWxpbmsuIik7CiAgICAgICAgd2FybmVkVGFnUHJvcCA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmICgnZXZlbnQnIGluIHRoaXMuJG9wdGlvbnMucHJvcHNEYXRhICYmICF3YXJuZWRFdmVudFByb3ApIHsKICAgICAgICB3YXJuKGZhbHNlLCAiPHJvdXRlci1saW5rPidzIGV2ZW50IHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgaGFzIGJlZW4gcmVtb3ZlZCBpbiBWdWUgUm91dGVyIDQuIFVzZSB0aGUgdi1zbG90IEFQSSB0byByZW1vdmUgdGhpcyB3YXJuaW5nOiBodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vI3JlbW92YWwtb2YtZXZlbnQtYW5kLXRhZy1wcm9wcy1pbi1yb3V0ZXItbGluay4iKTsKICAgICAgICB3YXJuZWRFdmVudFByb3AgPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgaWYgKHRoaXMudGFnID09PSAnYScpIHsKICAgICAgZGF0YS5vbiA9IG9uOwogICAgICBkYXRhLmF0dHJzID0gewogICAgICAgIGhyZWY6IGhyZWYsCiAgICAgICAgJ2FyaWEtY3VycmVudCc6IGFyaWFDdXJyZW50VmFsdWUKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IDxhPiBjaGlsZCBhbmQgYXBwbHkgbGlzdGVuZXIgYW5kIGhyZWYKICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpOwoKICAgICAgaWYgKGEpIHsKICAgICAgICAvLyBpbiBjYXNlIHRoZSA8YT4gaXMgYSBzdGF0aWMgbm9kZQogICAgICAgIGEuaXNTdGF0aWMgPSBmYWxzZTsKICAgICAgICB2YXIgYURhdGEgPSBhLmRhdGEgPSBleHRlbmQoe30sIGEuZGF0YSk7CiAgICAgICAgYURhdGEub24gPSBhRGF0YS5vbiB8fCB7fTsgLy8gdHJhbnNmb3JtIGV4aXN0aW5nIGV2ZW50cyBpbiBib3RoIG9iamVjdHMgaW50byBhcnJheXMgc28gd2UgY2FuIHB1c2ggbGF0ZXIKCiAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gYURhdGEub24pIHsKICAgICAgICAgIHZhciBoYW5kbGVyJDEgPSBhRGF0YS5vbltldmVudF07CgogICAgICAgICAgaWYgKGV2ZW50IGluIG9uKSB7CiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50XSA9IEFycmF5LmlzQXJyYXkoaGFuZGxlciQxKSA/IGhhbmRsZXIkMSA6IFtoYW5kbGVyJDFdOwogICAgICAgICAgfQogICAgICAgIH0gLy8gYXBwZW5kIG5ldyBsaXN0ZW5lcnMgZm9yIHJvdXRlci1saW5rCgoKICAgICAgICBmb3IgKHZhciBldmVudCQxIGluIG9uKSB7CiAgICAgICAgICBpZiAoZXZlbnQkMSBpbiBhRGF0YS5vbikgewogICAgICAgICAgICAvLyBvbltldmVudF0gaXMgYWx3YXlzIGEgZnVuY3Rpb24KICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0ucHVzaChvbltldmVudCQxXSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhRGF0YS5vbltldmVudCQxXSA9IGhhbmRsZXI7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgYUF0dHJzID0gYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpOwogICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjsKICAgICAgICBhQXR0cnNbJ2FyaWEtY3VycmVudCddID0gYXJpYUN1cnJlbnRWYWx1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBkb2Vzbid0IGhhdmUgPGE+IGNoaWxkLCBhcHBseSBsaXN0ZW5lciB0byBzZWxmCiAgICAgICAgZGF0YS5vbiA9IG9uOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGgodGhpcy50YWcsIGRhdGEsIHRoaXMuJHNsb3RzLmRlZmF1bHQpOwogIH0KfTsKCmZ1bmN0aW9uIGd1YXJkRXZlbnQoZSkgewogIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzCiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgewogICAgcmV0dXJuOwogIH0gLy8gZG9uJ3QgcmVkaXJlY3Qgd2hlbiBwcmV2ZW50RGVmYXVsdCBjYWxsZWQKCgogIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHsKICAgIHJldHVybjsKICB9IC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrCgoKICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMCkgewogICAgcmV0dXJuOwogIH0gLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD0iX2JsYW5rImAKCgogIGlmIChlLmN1cnJlbnRUYXJnZXQgJiYgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSkgewogICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpOwoKICAgIGlmICgvXGJfYmxhbmtcYi9pLnRlc3QodGFyZ2V0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgfSAvLyB0aGlzIG1heSBiZSBhIFdlZXggZXZlbnQgd2hpY2ggZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kCgoKICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgewogICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGZpbmRBbmNob3IoY2hpbGRyZW4pIHsKICBpZiAoY2hpbGRyZW4pIHsKICAgIHZhciBjaGlsZDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07CgogICAgICBpZiAoY2hpbGQudGFnID09PSAnYScpIHsKICAgICAgICByZXR1cm4gY2hpbGQ7CiAgICAgIH0KCiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHsKICAgICAgICByZXR1cm4gY2hpbGQ7CiAgICAgIH0KICAgIH0KICB9Cn0KCnZhciBfVnVlOwoKZnVuY3Rpb24gaW5zdGFsbChWdWUpIHsKICBpZiAoaW5zdGFsbC5pbnN0YWxsZWQgJiYgX1Z1ZSA9PT0gVnVlKSB7CiAgICByZXR1cm47CiAgfQoKICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7CiAgX1Z1ZSA9IFZ1ZTsKCiAgdmFyIGlzRGVmID0gZnVuY3Rpb24gKHYpIHsKICAgIHJldHVybiB2ICE9PSB1bmRlZmluZWQ7CiAgfTsKCiAgdmFyIHJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIGNhbGxWYWwpIHsKICAgIHZhciBpID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlOwoKICAgIGlmIChpc0RlZihpKSAmJiBpc0RlZihpID0gaS5kYXRhKSAmJiBpc0RlZihpID0gaS5yZWdpc3RlclJvdXRlSW5zdGFuY2UpKSB7CiAgICAgIGkodm0sIGNhbGxWYWwpOwogICAgfQogIH07CgogIFZ1ZS5taXhpbih7CiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSgpIHsKICAgICAgaWYgKGlzRGVmKHRoaXMuJG9wdGlvbnMucm91dGVyKSkgewogICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzOwogICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyOwoKICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTsKCiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290IHx8IHRoaXM7CiAgICAgIH0KCiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgdGhpcyk7CiAgICB9LAogICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7CiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7CiAgICB9CiAgfSk7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGVyJywgewogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZXI7CiAgICB9CiAgfSk7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7CiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlOwogICAgfQogIH0pOwogIFZ1ZS5jb21wb25lbnQoJ1JvdXRlclZpZXcnLCBWaWV3KTsKICBWdWUuY29tcG9uZW50KCdSb3V0ZXJMaW5rJywgTGluayk7CiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzOyAvLyB1c2UgdGhlIHNhbWUgaG9vayBtZXJnaW5nIHN0cmF0ZWd5IGZvciByb3V0ZSBob29rcwoKICBzdHJhdHMuYmVmb3JlUm91dGVFbnRlciA9IHN0cmF0cy5iZWZvcmVSb3V0ZUxlYXZlID0gc3RyYXRzLmJlZm9yZVJvdXRlVXBkYXRlID0gc3RyYXRzLmNyZWF0ZWQ7Cn0KLyogICovCgoKdmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnOwovKiAgKi8KCmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgb2xkUGF0aExpc3QsIG9sZFBhdGhNYXAsIG9sZE5hbWVNYXAsIHBhcmVudFJvdXRlKSB7CiAgLy8gdGhlIHBhdGggbGlzdCBpcyB1c2VkIHRvIGNvbnRyb2wgcGF0aCBtYXRjaGluZyBwcmlvcml0eQogIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdOyAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vICRmbG93LWRpc2FibGUtbGluZQoKICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTsKICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHsKICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSwgcGFyZW50Um91dGUpOwogIH0pOyAvLyBlbnN1cmUgd2lsZGNhcmQgcm91dGVzIGFyZSBhbHdheXMgYXQgdGhlIGVuZAoKICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGhMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgaWYgKHBhdGhMaXN0W2ldID09PSAnKicpIHsKICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pOwogICAgICBsLS07CiAgICAgIGktLTsKICAgIH0KICB9CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgewogICAgLy8gd2FybiBpZiByb3V0ZXMgZG8gbm90IGluY2x1ZGUgbGVhZGluZyBzbGFzaGVzCiAgICB2YXIgZm91bmQgPSBwYXRoTGlzdCAvLyBjaGVjayBmb3IgbWlzc2luZyBsZWFkaW5nIHNsYXNoCiAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYXRoKSB7CiAgICAgIHJldHVybiBwYXRoICYmIHBhdGguY2hhckF0KDApICE9PSAnKicgJiYgcGF0aC5jaGFyQXQoMCkgIT09ICcvJzsKICAgIH0pOwoKICAgIGlmIChmb3VuZC5sZW5ndGggPiAwKSB7CiAgICAgIHZhciBwYXRoTmFtZXMgPSBmb3VuZC5tYXAoZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgICByZXR1cm4gIi0gIiArIHBhdGg7CiAgICAgIH0pLmpvaW4oJ1xuJyk7CiAgICAgIHdhcm4oZmFsc2UsICJOb24tbmVzdGVkIHJvdXRlcyBtdXN0IGluY2x1ZGUgYSBsZWFkaW5nIHNsYXNoIGNoYXJhY3Rlci4gRml4IHRoZSBmb2xsb3dpbmcgcm91dGVzOiBcbiIgKyBwYXRoTmFtZXMpOwogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIHBhdGhMaXN0OiBwYXRoTGlzdCwKICAgIHBhdGhNYXA6IHBhdGhNYXAsCiAgICBuYW1lTWFwOiBuYW1lTWFwCiAgfTsKfQoKZnVuY3Rpb24gYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIHJvdXRlLCBwYXJlbnQsIG1hdGNoQXMpIHsKICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7CiAgdmFyIG5hbWUgPSByb3V0ZS5uYW1lOwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgYXNzZXJ0KHBhdGggIT0gbnVsbCwgIlwicGF0aFwiIGlzIHJlcXVpcmVkIGluIGEgcm91dGUgY29uZmlndXJhdGlvbi4iKTsKICAgIGFzc2VydCh0eXBlb2Ygcm91dGUuY29tcG9uZW50ICE9PSAnc3RyaW5nJywgInJvdXRlIGNvbmZpZyBcImNvbXBvbmVudFwiIGZvciBwYXRoOiAiICsgU3RyaW5nKHBhdGggfHwgbmFtZSkgKyAiIGNhbm5vdCBiZSBhICIgKyAic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLiIpOwogICAgd2FybiggLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXgKICAgICEvW15cdTAwMDAtXHUwMDdGXSsvLnRlc3QocGF0aCksICJSb3V0ZSB3aXRoIHBhdGggXCIiICsgcGF0aCArICJcIiBjb250YWlucyB1bmVuY29kZWQgY2hhcmFjdGVycywgbWFrZSBzdXJlICIgKyAieW91ciBwYXRoIGlzIGNvcnJlY3RseSBlbmNvZGVkIGJlZm9yZSBwYXNzaW5nIGl0IHRvIHRoZSByb3V0ZXIuIFVzZSAiICsgImVuY29kZVVSSSB0byBlbmNvZGUgc3RhdGljIHNlZ21lbnRzIG9mIHlvdXIgcGF0aC4iKTsKICB9CgogIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID0gcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTsKICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgsIHBhcmVudCwgcGF0aFRvUmVnZXhwT3B0aW9ucy5zdHJpY3QpOwoKICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykgewogICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlOwogIH0KCiAgdmFyIHJlY29yZCA9IHsKICAgIHBhdGg6IG5vcm1hbGl6ZWRQYXRoLAogICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSwKICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgewogICAgICBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQKICAgIH0sCiAgICBhbGlhczogcm91dGUuYWxpYXMgPyB0eXBlb2Ygcm91dGUuYWxpYXMgPT09ICdzdHJpbmcnID8gW3JvdXRlLmFsaWFzXSA6IHJvdXRlLmFsaWFzIDogW10sCiAgICBpbnN0YW5jZXM6IHt9LAogICAgZW50ZXJlZENiczoge30sCiAgICBuYW1lOiBuYW1lLAogICAgcGFyZW50OiBwYXJlbnQsCiAgICBtYXRjaEFzOiBtYXRjaEFzLAogICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LAogICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLAogICAgbWV0YTogcm91dGUubWV0YSB8fCB7fSwKICAgIHByb3BzOiByb3V0ZS5wcm9wcyA9PSBudWxsID8ge30gOiByb3V0ZS5jb21wb25lbnRzID8gcm91dGUucHJvcHMgOiB7CiAgICAgIGRlZmF1bHQ6IHJvdXRlLnByb3BzCiAgICB9CiAgfTsKCiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7CiAgICAvLyBXYXJuIGlmIHJvdXRlIGlzIG5hbWVkLCBkb2VzIG5vdCByZWRpcmVjdCBhbmQgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4KICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbAogICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KQogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgaWYgKHJvdXRlLm5hbWUgJiYgIXJvdXRlLnJlZGlyZWN0ICYmIHJvdXRlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgcmV0dXJuIC9eXC8/JC8udGVzdChjaGlsZC5wYXRoKTsKICAgICAgfSkpIHsKICAgICAgICB3YXJuKGZhbHNlLCAiTmFtZWQgUm91dGUgJyIgKyByb3V0ZS5uYW1lICsgIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gIiArICJXaGVuIG5hdmlnYXRpbmcgdG8gdGhpcyBuYW1lZCByb3V0ZSAoOnRvPVwie25hbWU6ICciICsgcm91dGUubmFtZSArICInfVwiKSwgIiArICJ0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUmVtb3ZlIHRoZSBuYW1lIGZyb20gIiArICJ0aGlzIHJvdXRlIGFuZCB1c2UgdGhlIG5hbWUgb2YgdGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgZm9yIG5hbWVkICIgKyAibGlua3MgaW5zdGVhZC4iKTsKICAgICAgfQogICAgfQoKICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgIHZhciBjaGlsZE1hdGNoQXMgPSBtYXRjaEFzID8gY2xlYW5QYXRoKG1hdGNoQXMgKyAiLyIgKyBjaGlsZC5wYXRoKSA6IHVuZGVmaW5lZDsKICAgICAgYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIGNoaWxkLCByZWNvcmQsIGNoaWxkTWF0Y2hBcyk7CiAgICB9KTsKICB9CgogIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHsKICAgIHBhdGhMaXN0LnB1c2gocmVjb3JkLnBhdGgpOwogICAgcGF0aE1hcFtyZWNvcmQucGF0aF0gPSByZWNvcmQ7CiAgfQoKICBpZiAocm91dGUuYWxpYXMgIT09IHVuZGVmaW5lZCkgewogICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHsKICAgICAgdmFyIGFsaWFzID0gYWxpYXNlc1tpXTsKCiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFsaWFzID09PSBwYXRoKSB7CiAgICAgICAgd2FybihmYWxzZSwgIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFwiIiArIHBhdGggKyAiXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuIik7IC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29yawoKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgdmFyIGFsaWFzUm91dGUgPSB7CiAgICAgICAgcGF0aDogYWxpYXMsCiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuCiAgICAgIH07CiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBhbGlhc1JvdXRlLCBwYXJlbnQsIHJlY29yZC5wYXRoIHx8ICcvJyAvLyBtYXRjaEFzCiAgICAgICk7CiAgICB9CiAgfQoKICBpZiAobmFtZSkgewogICAgaWYgKCFuYW1lTWFwW25hbWVdKSB7CiAgICAgIG5hbWVNYXBbbmFtZV0gPSByZWNvcmQ7CiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHsKICAgICAgd2FybihmYWxzZSwgIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogIiArICJ7IG5hbWU6IFwiIiArIG5hbWUgKyAiXCIsIHBhdGg6IFwiIiArIHJlY29yZC5wYXRoICsgIlwiIH0iKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGNvbXBpbGVSb3V0ZVJlZ2V4KHBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpIHsKICB2YXIgcmVnZXggPSBwYXRoVG9SZWdleHBfMShwYXRoLCBbXSwgcGF0aFRvUmVnZXhwT3B0aW9ucyk7CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICB2YXIga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICB3YXJuKCFrZXlzW2tleS5uYW1lXSwgIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXCIiICsgcGF0aCArICJcIiIpOwogICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7CiAgICB9KTsKICB9CgogIHJldHVybiByZWdleDsKfQoKZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHN0cmljdCkgewogIGlmICghc3RyaWN0KSB7CiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cLyQvLCAnJyk7CiAgfQoKICBpZiAocGF0aFswXSA9PT0gJy8nKSB7CiAgICByZXR1cm4gcGF0aDsKICB9CgogIGlmIChwYXJlbnQgPT0gbnVsbCkgewogICAgcmV0dXJuIHBhdGg7CiAgfQoKICByZXR1cm4gY2xlYW5QYXRoKHBhcmVudC5wYXRoICsgIi8iICsgcGF0aCk7Cn0KLyogICovCgoKZnVuY3Rpb24gY3JlYXRlTWF0Y2hlcihyb3V0ZXMsIHJvdXRlcikgewogIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpOwogIHZhciBwYXRoTGlzdCA9IHJlZi5wYXRoTGlzdDsKICB2YXIgcGF0aE1hcCA9IHJlZi5wYXRoTWFwOwogIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7CgogIGZ1bmN0aW9uIGFkZFJvdXRlcyhyb3V0ZXMpIHsKICAgIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgcGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXApOwogIH0KCiAgZnVuY3Rpb24gYWRkUm91dGUocGFyZW50T3JSb3V0ZSwgcm91dGUpIHsKICAgIHZhciBwYXJlbnQgPSB0eXBlb2YgcGFyZW50T3JSb3V0ZSAhPT0gJ29iamVjdCcgPyBuYW1lTWFwW3BhcmVudE9yUm91dGVdIDogdW5kZWZpbmVkOyAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCiAgICBjcmVhdGVSb3V0ZU1hcChbcm91dGUgfHwgcGFyZW50T3JSb3V0ZV0sIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBwYXJlbnQpOyAvLyBhZGQgYWxpYXNlcyBvZiBwYXJlbnQKCiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5hbGlhcy5sZW5ndGgpIHsKICAgICAgY3JlYXRlUm91dGVNYXAoIC8vICRmbG93LWRpc2FibGUtbGluZSByb3V0ZSBpcyBkZWZpbmVkIGlmIHBhcmVudCBpcwogICAgICBwYXJlbnQuYWxpYXMubWFwKGZ1bmN0aW9uIChhbGlhcykgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwYXRoOiBhbGlhcywKICAgICAgICAgIGNoaWxkcmVuOiBbcm91dGVdCiAgICAgICAgfTsKICAgICAgfSksIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBwYXJlbnQpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2V0Um91dGVzKCkgewogICAgcmV0dXJuIHBhdGhMaXN0Lm1hcChmdW5jdGlvbiAocGF0aCkgewogICAgICByZXR1cm4gcGF0aE1hcFtwYXRoXTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gbWF0Y2gocmF3LCBjdXJyZW50Um91dGUsIHJlZGlyZWN0ZWRGcm9tKSB7CiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihyYXcsIGN1cnJlbnRSb3V0ZSwgZmFsc2UsIHJvdXRlcik7CiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7CgogICAgaWYgKG5hbWUpIHsKICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07CgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHdhcm4ocmVjb3JkLCAiUm91dGUgd2l0aCBuYW1lICciICsgbmFtZSArICInIGRvZXMgbm90IGV4aXN0Iik7CiAgICAgIH0KCiAgICAgIGlmICghcmVjb3JkKSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbik7CiAgICAgIH0KCiAgICAgIHZhciBwYXJhbU5hbWVzID0gcmVjb3JkLnJlZ2V4LmtleXMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gIWtleS5vcHRpb25hbDsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4ga2V5Lm5hbWU7CiAgICAgIH0pOwoKICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbi5wYXJhbXMgIT09ICdvYmplY3QnKSB7CiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307CiAgICAgIH0KCiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHsKICAgICAgICAgIGlmICghKGtleSBpbiBsb2NhdGlvbi5wYXJhbXMpICYmIHBhcmFtTmFtZXMuaW5kZXhPZihrZXkpID4gLTEpIHsKICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBsb2NhdGlvbi5wYXRoID0gZmlsbFBhcmFtcyhyZWNvcmQucGF0aCwgbG9jYXRpb24ucGFyYW1zLCAibmFtZWQgcm91dGUgXCIiICsgbmFtZSArICJcIiIpOwogICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKTsKICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkgewogICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aExpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldOwogICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07CgogICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7CiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCQxLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20pOwogICAgICAgIH0KICAgICAgfQogICAgfSAvLyBubyBtYXRjaAoKCiAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKTsKICB9CgogIGZ1bmN0aW9uIHJlZGlyZWN0KHJlY29yZCwgbG9jYXRpb24pIHsKICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0OwogICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbicgPyBvcmlnaW5hbFJlZGlyZWN0KGNyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIG51bGwsIHJvdXRlcikpIDogb3JpZ2luYWxSZWRpcmVjdDsKCiAgICBpZiAodHlwZW9mIHJlZGlyZWN0ID09PSAnc3RyaW5nJykgewogICAgICByZWRpcmVjdCA9IHsKICAgICAgICBwYXRoOiByZWRpcmVjdAogICAgICB9OwogICAgfQoKICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0JykgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHdhcm4oZmFsc2UsICJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogIiArIEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pOwogICAgfQoKICAgIHZhciByZSA9IHJlZGlyZWN0OwogICAgdmFyIG5hbWUgPSByZS5uYW1lOwogICAgdmFyIHBhdGggPSByZS5wYXRoOwogICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7CiAgICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgICB2YXIgcGFyYW1zID0gbG9jYXRpb24ucGFyYW1zOwogICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7CiAgICBoYXNoID0gcmUuaGFzT3duUHJvcGVydHkoJ2hhc2gnKSA/IHJlLmhhc2ggOiBoYXNoOwogICAgcGFyYW1zID0gcmUuaGFzT3duUHJvcGVydHkoJ3BhcmFtcycpID8gcmUucGFyYW1zIDogcGFyYW1zOwoKICAgIGlmIChuYW1lKSB7CiAgICAgIC8vIHJlc29sdmVkIG5hbWVkIGRpcmVjdAogICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTsKCiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgYXNzZXJ0KHRhcmdldFJlY29yZCwgInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXCIiICsgbmFtZSArICJcIiBub3QgZm91bmQuIik7CiAgICAgIH0KCiAgICAgIHJldHVybiBtYXRjaCh7CiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsCiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICBxdWVyeTogcXVlcnksCiAgICAgICAgaGFzaDogaGFzaCwKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKTsKICAgIH0gZWxzZSBpZiAocGF0aCkgewogICAgICAvLyAxLiByZXNvbHZlIHJlbGF0aXZlIHJlZGlyZWN0CiAgICAgIHZhciByYXdQYXRoID0gcmVzb2x2ZVJlY29yZFBhdGgocGF0aCwgcmVjb3JkKTsgLy8gMi4gcmVzb2x2ZSBwYXJhbXMKCiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgInJlZGlyZWN0IHJvdXRlIHdpdGggcGF0aCBcIiIgKyByYXdQYXRoICsgIlwiIik7IC8vIDMuIHJlbWF0Y2ggd2l0aCBleGlzdGluZyBxdWVyeSBhbmQgaGFzaAoKICAgICAgcmV0dXJuIG1hdGNoKHsKICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSwKICAgICAgICBwYXRoOiByZXNvbHZlZFBhdGgsCiAgICAgICAgcXVlcnk6IHF1ZXJ5LAogICAgICAgIGhhc2g6IGhhc2gKICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbik7CiAgICB9IGVsc2UgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHdhcm4oZmFsc2UsICJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogIiArIEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pOwogICAgfQogIH0KCiAgZnVuY3Rpb24gYWxpYXMocmVjb3JkLCBsb2NhdGlvbiwgbWF0Y2hBcykgewogICAgdmFyIGFsaWFzZWRQYXRoID0gZmlsbFBhcmFtcyhtYXRjaEFzLCBsb2NhdGlvbi5wYXJhbXMsICJhbGlhc2VkIHJvdXRlIHdpdGggcGF0aCBcIiIgKyBtYXRjaEFzICsgIlwiIik7CiAgICB2YXIgYWxpYXNlZE1hdGNoID0gbWF0Y2goewogICAgICBfbm9ybWFsaXplZDogdHJ1ZSwKICAgICAgcGF0aDogYWxpYXNlZFBhdGgKICAgIH0pOwoKICAgIGlmIChhbGlhc2VkTWF0Y2gpIHsKICAgICAgdmFyIG1hdGNoZWQgPSBhbGlhc2VkTWF0Y2gubWF0Y2hlZDsKICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07CiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IGFsaWFzZWRNYXRjaC5wYXJhbXM7CiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUoYWxpYXNlZFJlY29yZCwgbG9jYXRpb24pOwogICAgfQoKICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pOwogIH0KCiAgZnVuY3Rpb24gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKSB7CiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5yZWRpcmVjdCkgewogICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbik7CiAgICB9CgogICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykgewogICAgICByZXR1cm4gYWxpYXMocmVjb3JkLCBsb2NhdGlvbiwgcmVjb3JkLm1hdGNoQXMpOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSwgcm91dGVyKTsKICB9CgogIHJldHVybiB7CiAgICBtYXRjaDogbWF0Y2gsCiAgICBhZGRSb3V0ZTogYWRkUm91dGUsCiAgICBnZXRSb3V0ZXM6IGdldFJvdXRlcywKICAgIGFkZFJvdXRlczogYWRkUm91dGVzCiAgfTsKfQoKZnVuY3Rpb24gbWF0Y2hSb3V0ZShyZWdleCwgcGF0aCwgcGFyYW1zKSB7CiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTsKCiAgaWYgKCFtKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSBlbHNlIGlmICghcGFyYW1zKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07CgogICAgaWYgKGtleSkgewogICAgICAvLyBGaXggIzE5OTQ6IHVzaW5nICogd2l0aCBwcm9wczogdHJ1ZSBnZW5lcmF0ZXMgYSBwYXJhbSBuYW1lZCAwCiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGUobVtpXSkgOiBtW2ldOwogICAgfQogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIHJlc29sdmVSZWNvcmRQYXRoKHBhdGgsIHJlY29yZCkgewogIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKTsKfQovKiAgKi8KLy8gdXNlIFVzZXIgVGltaW5nIGFwaSAoaWYgcHJlc2VudCkgZm9yIG1vcmUgYWNjdXJhdGUga2V5IHByZWNpc2lvbgoKCnZhciBUaW1lID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID8gd2luZG93LnBlcmZvcm1hbmNlIDogRGF0ZTsKCmZ1bmN0aW9uIGdlblN0YXRlS2V5KCkgewogIHJldHVybiBUaW1lLm5vdygpLnRvRml4ZWQoMyk7Cn0KCnZhciBfa2V5ID0gZ2VuU3RhdGVLZXkoKTsKCmZ1bmN0aW9uIGdldFN0YXRlS2V5KCkgewogIHJldHVybiBfa2V5Owp9CgpmdW5jdGlvbiBzZXRTdGF0ZUtleShrZXkpIHsKICByZXR1cm4gX2tleSA9IGtleTsKfQovKiAgKi8KCgp2YXIgcG9zaXRpb25TdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgpmdW5jdGlvbiBzZXR1cFNjcm9sbCgpIHsKICAvLyBQcmV2ZW50IGJyb3dzZXIgc2Nyb2xsIGJlaGF2aW9yIG9uIEhpc3RvcnkgcG9wc3RhdGUKICBpZiAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiB3aW5kb3cuaGlzdG9yeSkgewogICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJzsKICB9IC8vIEZpeCBmb3IgIzE1ODUgZm9yIEZpcmVmb3gKICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OAogIC8vIEZpeCBmb3IgIzI3NzQgU3VwcG9ydCBmb3IgYXBwcyBsb2FkZWQgZnJvbSBXaW5kb3dzIGZpbGUgc2hhcmVzIG5vdCBtYXBwZWQgdG8gbmV0d29yayBkcml2ZXM6IHJlcGxhY2VkIGxvY2F0aW9uLm9yaWdpbiB3aXRoCiAgLy8gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0CiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndAoKCiAgdmFyIHByb3RvY29sQW5kUGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdDsKICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTsgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXIKCiAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpOwogIHN0YXRlQ29weS5rZXkgPSBnZXRTdGF0ZUtleSgpOwogIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCBhYnNvbHV0ZVBhdGgpOwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcFN0YXRlKTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgaGFuZGxlUG9wU3RhdGUpOwogIH07Cn0KCmZ1bmN0aW9uIGhhbmRsZVNjcm9sbChyb3V0ZXIsIHRvLCBmcm9tLCBpc1BvcCkgewogIGlmICghcm91dGVyLmFwcCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7CgogIGlmICghYmVoYXZpb3IpIHsKICAgIHJldHVybjsKICB9CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICBhc3NlcnQodHlwZW9mIGJlaGF2aW9yID09PSAnZnVuY3Rpb24nLCAic2Nyb2xsQmVoYXZpb3IgbXVzdCBiZSBhIGZ1bmN0aW9uIik7CiAgfSAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nCgoKICByb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpOwogICAgdmFyIHNob3VsZFNjcm9sbCA9IGJlaGF2aW9yLmNhbGwocm91dGVyLCB0bywgZnJvbSwgaXNQb3AgPyBwb3NpdGlvbiA6IG51bGwpOwoKICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHNob3VsZFNjcm9sbC50aGVuKGZ1bmN0aW9uIChzaG91bGRTY3JvbGwpIHsKICAgICAgICBzY3JvbGxUb1Bvc2l0aW9uKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgIGFzc2VydChmYWxzZSwgZXJyLnRvU3RyaW5nKCkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBzY3JvbGxUb1Bvc2l0aW9uKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pOwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24oKSB7CiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7CgogIGlmIChrZXkpIHsKICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHsKICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LAogICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQKICAgIH07CiAgfQp9CgpmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShlKSB7CiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7CgogIGlmIChlLnN0YXRlICYmIGUuc3RhdGUua2V5KSB7CiAgICBzZXRTdGF0ZUtleShlLnN0YXRlLmtleSk7CiAgfQp9CgpmdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHsKICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTsKCiAgaWYgKGtleSkgewogICAgcmV0dXJuIHBvc2l0aW9uU3RvcmVba2V5XTsKICB9Cn0KCmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KSB7CiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIHZhciBkb2NSZWN0ID0gZG9jRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogIHJldHVybiB7CiAgICB4OiBlbFJlY3QubGVmdCAtIGRvY1JlY3QubGVmdCAtIG9mZnNldC54LAogICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnkKICB9Owp9CgpmdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24ob2JqKSB7CiAgcmV0dXJuIGlzTnVtYmVyKG9iai54KSB8fCBpc051bWJlcihvYmoueSk7Cn0KCmZ1bmN0aW9uIG5vcm1hbGl6ZVBvc2l0aW9uKG9iaikgewogIHJldHVybiB7CiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IHdpbmRvdy5wYWdlWE9mZnNldCwKICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogd2luZG93LnBhZ2VZT2Zmc2V0CiAgfTsKfQoKZnVuY3Rpb24gbm9ybWFsaXplT2Zmc2V0KG9iaikgewogIHJldHVybiB7CiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IDAsCiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDAKICB9Owp9CgpmdW5jdGlvbiBpc051bWJlcih2KSB7CiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJzsKfQoKdmFyIGhhc2hTdGFydHNXaXRoTnVtYmVyUkUgPSAvXiNcZC87CgpmdW5jdGlvbiBzY3JvbGxUb1Bvc2l0aW9uKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pIHsKICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JzsKCiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7CiAgICAvLyBnZXRFbGVtZW50QnlJZCB3b3VsZCBzdGlsbCBmYWlsIGlmIHRoZSBzZWxlY3RvciBjb250YWlucyBhIG1vcmUgY29tcGxpY2F0ZWQgcXVlcnkgbGlrZSAjbWFpbltkYXRhLWF0dHJdCiAgICAvLyBidXQgYXQgdGhlIHNhbWUgdGltZSwgaXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gc2VsZWN0IGFuIGVsZW1lbnQgd2l0aCBhbiBpZCBhbmQgYW4gZXh0cmEgc2VsZWN0b3IKICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7CgogICAgaWYgKGVsKSB7CiAgICAgIHZhciBvZmZzZXQgPSBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0JyA/IHNob3VsZFNjcm9sbC5vZmZzZXQgOiB7fTsKICAgICAgb2Zmc2V0ID0gbm9ybWFsaXplT2Zmc2V0KG9mZnNldCk7CiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpOwogICAgfSBlbHNlIGlmIChpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkgewogICAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7CiAgICB9CiAgfSBlbHNlIGlmIChpc09iamVjdCAmJiBpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkgewogICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpOwogIH0KCiAgaWYgKHBvc2l0aW9uKSB7CiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgIGlmICgnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgewogICAgICB3aW5kb3cuc2Nyb2xsVG8oewogICAgICAgIGxlZnQ6IHBvc2l0aW9uLngsCiAgICAgICAgdG9wOiBwb3NpdGlvbi55LAogICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgICAgIGJlaGF2aW9yOiBzaG91bGRTY3JvbGwuYmVoYXZpb3IKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7CiAgICB9CiAgfQp9Ci8qICAqLwoKCnZhciBzdXBwb3J0c1B1c2hTdGF0ZSA9IGluQnJvd3NlciAmJiBmdW5jdGlvbiAoKSB7CiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7CgogIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmIHR5cGVvZiB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgPT09ICdmdW5jdGlvbic7Cn0oKTsKCmZ1bmN0aW9uIHB1c2hTdGF0ZSh1cmwsIHJlcGxhY2UpIHsKICBzYXZlU2Nyb2xsUG9zaXRpb24oKTsgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpCiAgLy8gRE9NIEV4Y2VwdGlvbiAxOCB3aGVyZSBpdCBsaW1pdHMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscwoKICB2YXIgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwoKICB0cnkgewogICAgaWYgKHJlcGxhY2UpIHsKICAgICAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXIKICAgICAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgaGlzdG9yeS5zdGF0ZSk7CiAgICAgIHN0YXRlQ29weS5rZXkgPSBnZXRTdGF0ZUtleSgpOwogICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCB1cmwpOwogICAgfSBlbHNlIHsKICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoewogICAgICAgIGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkKICAgICAgfSwgJycsIHVybCk7CiAgICB9CiAgfSBjYXRjaCAoZSkgewogICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTsKICB9Cn0KCmZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSh1cmwpIHsKICBwdXNoU3RhdGUodXJsLCB0cnVlKTsKfSAvLyBXaGVuIGNoYW5naW5nIHRoaW5nLCBhbHNvIGVkaXQgcm91dGVyLmQudHMKCgp2YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gewogIHJlZGlyZWN0ZWQ6IDIsCiAgYWJvcnRlZDogNCwKICBjYW5jZWxsZWQ6IDgsCiAgZHVwbGljYXRlZDogMTYKfTsKCmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25SZWRpcmVjdGVkRXJyb3IoZnJvbSwgdG8pIHsKICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoZnJvbSwgdG8sIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5yZWRpcmVjdGVkLCAiUmVkaXJlY3RlZCB3aGVuIGdvaW5nIGZyb20gXCIiICsgZnJvbS5mdWxsUGF0aCArICJcIiB0byBcIiIgKyBzdHJpbmdpZnlSb3V0ZSh0bykgKyAiXCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC4iKTsKfQoKZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkR1cGxpY2F0ZWRFcnJvcihmcm9tLCB0bykgewogIHZhciBlcnJvciA9IGNyZWF0ZVJvdXRlckVycm9yKGZyb20sIHRvLCBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUuZHVwbGljYXRlZCwgIkF2b2lkZWQgcmVkdW5kYW50IG5hdmlnYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbjogXCIiICsgZnJvbS5mdWxsUGF0aCArICJcIi4iKTsgLy8gYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCB0aGUgZmlyc3QgaW50cm9kdWN0aW9uIG9mIEVycm9ycwoKICBlcnJvci5uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJzsKICByZXR1cm4gZXJyb3I7Cn0KCmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25DYW5jZWxsZWRFcnJvcihmcm9tLCB0bykgewogIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihmcm9tLCB0bywgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmNhbmNlbGxlZCwgIk5hdmlnYXRpb24gY2FuY2VsbGVkIGZyb20gXCIiICsgZnJvbS5mdWxsUGF0aCArICJcIiB0byBcIiIgKyB0by5mdWxsUGF0aCArICJcIiB3aXRoIGEgbmV3IG5hdmlnYXRpb24uIik7Cn0KCmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoZnJvbSwgdG8pIHsKICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoZnJvbSwgdG8sIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5hYm9ydGVkLCAiTmF2aWdhdGlvbiBhYm9ydGVkIGZyb20gXCIiICsgZnJvbS5mdWxsUGF0aCArICJcIiB0byBcIiIgKyB0by5mdWxsUGF0aCArICJcIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLiIpOwp9CgpmdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvcihmcm9tLCB0bywgdHlwZSwgbWVzc2FnZSkgewogIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTsKICBlcnJvci5faXNSb3V0ZXIgPSB0cnVlOwogIGVycm9yLmZyb20gPSBmcm9tOwogIGVycm9yLnRvID0gdG87CiAgZXJyb3IudHlwZSA9IHR5cGU7CiAgcmV0dXJuIGVycm9yOwp9Cgp2YXIgcHJvcGVydGllc1RvTG9nID0gWydwYXJhbXMnLCAncXVlcnknLCAnaGFzaCddOwoKZnVuY3Rpb24gc3RyaW5naWZ5Um91dGUodG8pIHsKICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHRvOwogIH0KCiAgaWYgKCdwYXRoJyBpbiB0bykgewogICAgcmV0dXJuIHRvLnBhdGg7CiAgfQoKICB2YXIgbG9jYXRpb24gPSB7fTsKICBwcm9wZXJ0aWVzVG9Mb2cuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICBpZiAoa2V5IGluIHRvKSB7CiAgICAgIGxvY2F0aW9uW2tleV0gPSB0b1trZXldOwogICAgfQogIH0pOwogIHJldHVybiBKU09OLnN0cmluZ2lmeShsb2NhdGlvbiwgbnVsbCwgMik7Cn0KCmZ1bmN0aW9uIGlzRXJyb3IoZXJyKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMTsKfQoKZnVuY3Rpb24gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIGVycm9yVHlwZSkgewogIHJldHVybiBpc0Vycm9yKGVycikgJiYgZXJyLl9pc1JvdXRlciAmJiAoZXJyb3JUeXBlID09IG51bGwgfHwgZXJyLnR5cGUgPT09IGVycm9yVHlwZSk7Cn0KLyogICovCgoKZnVuY3Rpb24gcnVuUXVldWUocXVldWUsIGZuLCBjYikgewogIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7CiAgICBpZiAoaW5kZXggPj0gcXVldWUubGVuZ3RoKSB7CiAgICAgIGNiKCk7CiAgICB9IGVsc2UgewogICAgICBpZiAocXVldWVbaW5kZXhdKSB7CiAgICAgICAgZm4ocXVldWVbaW5kZXhdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RlcChpbmRleCArIDEpOwogICAgICB9CiAgICB9CiAgfTsKCiAgc3RlcCgwKTsKfQovKiAgKi8KCgpmdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzKG1hdGNoZWQpIHsKICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBuZXh0KSB7CiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTsKICAgIHZhciBwZW5kaW5nID0gMDsKICAgIHZhciBlcnJvciA9IG51bGw7CiAgICBmbGF0TWFwQ29tcG9uZW50cyhtYXRjaGVkLCBmdW5jdGlvbiAoZGVmLCBfLCBtYXRjaCwga2V5KSB7CiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCwKICAgICAgLy8gYXNzdW1lIGl0J3MgYW4gYXN5bmMgY29tcG9uZW50IHJlc29sdmUgZnVuY3Rpb24uCiAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgVnVlJ3MgZGVmYXVsdCBhc3luYyByZXNvbHZpbmcgbWVjaGFuaXNtIGJlY2F1c2UKICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW4KICAgICAgLy8gcmVzb2x2ZWQuCiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGRlZi5jaWQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGhhc0FzeW5jID0gdHJ1ZTsKICAgICAgICBwZW5kaW5nKys7CiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXNvbHZlZERlZikgewogICAgICAgICAgaWYgKGlzRVNNb2R1bGUocmVzb2x2ZWREZWYpKSB7CiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDsKICAgICAgICAgIH0gLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZQoKCiAgICAgICAgICBkZWYucmVzb2x2ZWQgPSB0eXBlb2YgcmVzb2x2ZWREZWYgPT09ICdmdW5jdGlvbicgPyByZXNvbHZlZERlZiA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTsKICAgICAgICAgIG1hdGNoLmNvbXBvbmVudHNba2V5XSA9IHJlc29sdmVkRGVmOwogICAgICAgICAgcGVuZGluZy0tOwoKICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHsKICAgICAgICAgICAgbmV4dCgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHZhciBtc2cgPSAiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50ICIgKyBrZXkgKyAiOiAiICsgcmVhc29uOwogICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpOwoKICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbikgPyByZWFzb24gOiBuZXcgRXJyb3IobXNnKTsKICAgICAgICAgICAgbmV4dChlcnJvcik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHJlczsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJlcyA9IGRlZihyZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuMwogICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7CgogICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgY29tcC50aGVuKHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIGlmICghaGFzQXN5bmMpIHsKICAgICAgbmV4dCgpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZuKSB7CiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiBmbihtLmNvbXBvbmVudHNba2V5XSwgbS5pbnN0YW5jZXNba2V5XSwgbSwga2V5KTsKICAgIH0pOwogIH0pKTsKfQoKZnVuY3Rpb24gZmxhdHRlbihhcnIpIHsKICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTsKfQoKdmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7CgpmdW5jdGlvbiBpc0VTTW9kdWxlKG9iaikgewogIHJldHVybiBvYmouX19lc01vZHVsZSB8fCBoYXNTeW1ib2wgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnOwp9IC8vIGluIFdlYnBhY2sgMiwgcmVxdWlyZS5lbnN1cmUgbm93IGFsc28gcmV0dXJucyBhIFByb21pc2UKLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lCi8vIGlmIHRoZSB1c2VyIHVzZXMgYW4gYXJyb3cgZnVuY3Rpb24gc2hvcnRoYW5kIHRoYXQgaGFwcGVucyB0bwovLyByZXR1cm4gdGhhdCBQcm9taXNlLgoKCmZ1bmN0aW9uIG9uY2UoZm4pIHsKICB2YXIgY2FsbGVkID0gZmFsc2U7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBhcmdzID0gW10sCiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKCiAgICB3aGlsZSAobGVuLS0pIGFyZ3NbbGVuXSA9IGFyZ3VtZW50c1tsZW5dOwoKICAgIGlmIChjYWxsZWQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNhbGxlZCA9IHRydWU7CiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7CiAgfTsKfQovKiAgKi8KCgp2YXIgSGlzdG9yeSA9IGZ1bmN0aW9uIEhpc3Rvcnkocm91dGVyLCBiYXNlKSB7CiAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7CiAgdGhpcy5iYXNlID0gbm9ybWFsaXplQmFzZShiYXNlKTsgLy8gc3RhcnQgd2l0aCBhIHJvdXRlIG9iamVjdCB0aGF0IHN0YW5kcyBmb3IgIm5vd2hlcmUiCgogIHRoaXMuY3VycmVudCA9IFNUQVJUOwogIHRoaXMucGVuZGluZyA9IG51bGw7CiAgdGhpcy5yZWFkeSA9IGZhbHNlOwogIHRoaXMucmVhZHlDYnMgPSBbXTsKICB0aGlzLnJlYWR5RXJyb3JDYnMgPSBbXTsKICB0aGlzLmVycm9yQ2JzID0gW107CiAgdGhpcy5saXN0ZW5lcnMgPSBbXTsKfTsKCkhpc3RvcnkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihjYikgewogIHRoaXMuY2IgPSBjYjsKfTsKCkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5KGNiLCBlcnJvckNiKSB7CiAgaWYgKHRoaXMucmVhZHkpIHsKICAgIGNiKCk7CiAgfSBlbHNlIHsKICAgIHRoaXMucmVhZHlDYnMucHVzaChjYik7CgogICAgaWYgKGVycm9yQ2IpIHsKICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7CiAgICB9CiAgfQp9OwoKSGlzdG9yeS5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3JDYikgewogIHRoaXMuZXJyb3JDYnMucHVzaChlcnJvckNiKTsKfTsKCkhpc3RvcnkucHJvdG90eXBlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgdmFyIHJvdXRlOyAvLyBjYXRjaCByZWRpcmVjdCBvcHRpb24gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMDEKCiAgdHJ5IHsKICAgIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7CiAgfSBjYXRjaCAoZSkgewogICAgdGhpcy5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgewogICAgICBjYihlKTsKICAgIH0pOyAvLyBFeGNlcHRpb24gc2hvdWxkIHN0aWxsIGJlIHRocm93bgoKICAgIHRocm93IGU7CiAgfQoKICB2YXIgcHJldiA9IHRoaXMuY3VycmVudDsKICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKHJvdXRlLCBmdW5jdGlvbiAoKSB7CiAgICB0aGlzJDEkMS51cGRhdGVSb3V0ZShyb3V0ZSk7CiAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgdGhpcyQxJDEuZW5zdXJlVVJMKCk7CiAgICB0aGlzJDEkMS5yb3V0ZXIuYWZ0ZXJIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7CiAgICAgIGhvb2sgJiYgaG9vayhyb3V0ZSwgcHJldik7CiAgICB9KTsgLy8gZmlyZSByZWFkeSBjYnMgb25jZQoKICAgIGlmICghdGhpcyQxJDEucmVhZHkpIHsKICAgICAgdGhpcyQxJDEucmVhZHkgPSB0cnVlOwogICAgICB0aGlzJDEkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgewogICAgICAgIGNiKHJvdXRlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgZnVuY3Rpb24gKGVycikgewogICAgaWYgKG9uQWJvcnQpIHsKICAgICAgb25BYm9ydChlcnIpOwogICAgfQoKICAgIGlmIChlcnIgJiYgIXRoaXMkMSQxLnJlYWR5KSB7CiAgICAgIC8vIEluaXRpYWwgcmVkaXJlY3Rpb24gc2hvdWxkIG5vdCBtYXJrIHRoZSBoaXN0b3J5IGFzIHJlYWR5IHlldAogICAgICAvLyBiZWNhdXNlIGl0J3MgdHJpZ2dlcmVkIGJ5IHRoZSByZWRpcmVjdGlvbiBpbnN0ZWFkCiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMjI1CiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMzMxCiAgICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5yZWRpcmVjdGVkKSB8fCBwcmV2ICE9PSBTVEFSVCkgewogICAgICAgIHRoaXMkMSQxLnJlYWR5ID0gdHJ1ZTsKICAgICAgICB0aGlzJDEkMS5yZWFkeUVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgICBjYihlcnIpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSk7Cn07CgpIaXN0b3J5LnByb3RvdHlwZS5jb25maXJtVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7CiAgdmFyIHRoaXMkMSQxID0gdGhpczsKICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICB0aGlzLnBlbmRpbmcgPSByb3V0ZTsKCiAgdmFyIGFib3J0ID0gZnVuY3Rpb24gKGVycikgewogICAgLy8gY2hhbmdlZCBhZnRlciBhZGRpbmcgZXJyb3JzIHdpdGgKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL3B1bGwvMzA0NyBiZWZvcmUgdGhhdCBjaGFuZ2UsCiAgICAvLyByZWRpcmVjdCBhbmQgYWJvcnRlZCBuYXZpZ2F0aW9uIHdvdWxkIHByb2R1Y2UgYW4gZXJyID09IG51bGwKICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIpICYmIGlzRXJyb3IoZXJyKSkgewogICAgICBpZiAodGhpcyQxJDEuZXJyb3JDYnMubGVuZ3RoKSB7CiAgICAgICAgdGhpcyQxJDEuZXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsKICAgICAgICAgIGNiKGVycik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgIHdhcm4oZmFsc2UsICd1bmNhdWdodCBlcnJvciBkdXJpbmcgcm91dGUgbmF2aWdhdGlvbjonKTsKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgfQogICAgfQoKICAgIG9uQWJvcnQgJiYgb25BYm9ydChlcnIpOwogIH07CgogIHZhciBsYXN0Um91dGVJbmRleCA9IHJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMTsKICB2YXIgbGFzdEN1cnJlbnRJbmRleCA9IGN1cnJlbnQubWF0Y2hlZC5sZW5ndGggLSAxOwoKICBpZiAoaXNTYW1lUm91dGUocm91dGUsIGN1cnJlbnQpICYmIC8vIGluIHRoZSBjYXNlIHRoZSByb3V0ZSBtYXAgaGFzIGJlZW4gZHluYW1pY2FsbHkgYXBwZW5kZWQgdG8KICBsYXN0Um91dGVJbmRleCA9PT0gbGFzdEN1cnJlbnRJbmRleCAmJiByb3V0ZS5tYXRjaGVkW2xhc3RSb3V0ZUluZGV4XSA9PT0gY3VycmVudC5tYXRjaGVkW2xhc3RDdXJyZW50SW5kZXhdKSB7CiAgICB0aGlzLmVuc3VyZVVSTCgpOwoKICAgIGlmIChyb3V0ZS5oYXNoKSB7CiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzLnJvdXRlciwgY3VycmVudCwgcm91dGUsIGZhbHNlKTsKICAgIH0KCiAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkR1cGxpY2F0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpOwogIH0KCiAgdmFyIHJlZiA9IHJlc29sdmVRdWV1ZSh0aGlzLmN1cnJlbnQubWF0Y2hlZCwgcm91dGUubWF0Y2hlZCk7CiAgdmFyIHVwZGF0ZWQgPSByZWYudXBkYXRlZDsKICB2YXIgZGVhY3RpdmF0ZWQgPSByZWYuZGVhY3RpdmF0ZWQ7CiAgdmFyIGFjdGl2YXRlZCA9IHJlZi5hY3RpdmF0ZWQ7CiAgdmFyIHF1ZXVlID0gW10uY29uY2F0KCAvLyBpbi1jb21wb25lbnQgbGVhdmUgZ3VhcmRzCiAgZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSwgLy8gZ2xvYmFsIGJlZm9yZSBob29rcwogIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLCAvLyBpbi1jb21wb25lbnQgdXBkYXRlIGhvb2tzCiAgZXh0cmFjdFVwZGF0ZUhvb2tzKHVwZGF0ZWQpLCAvLyBpbi1jb25maWcgZW50ZXIgZ3VhcmRzCiAgYWN0aXZhdGVkLm1hcChmdW5jdGlvbiAobSkgewogICAgcmV0dXJuIG0uYmVmb3JlRW50ZXI7CiAgfSksIC8vIGFzeW5jIGNvbXBvbmVudHMKICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZCkpOwoKICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkgewogICAgaWYgKHRoaXMkMSQxLnBlbmRpbmcgIT09IHJvdXRlKSB7CiAgICAgIHJldHVybiBhYm9ydChjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTsKICAgIH0KCiAgICB0cnkgewogICAgICBob29rKHJvdXRlLCBjdXJyZW50LCBmdW5jdGlvbiAodG8pIHsKICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7CiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkwKICAgICAgICAgIHRoaXMkMSQxLmVuc3VyZVVSTCh0cnVlKTsKICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTsKICAgICAgICB9IGVsc2UgaWYgKGlzRXJyb3IodG8pKSB7CiAgICAgICAgICB0aGlzJDEkMS5lbnN1cmVVUkwodHJ1ZSk7CiAgICAgICAgICBhYm9ydCh0byk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdG8gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiYgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKSB7CiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdAogICAgICAgICAgYWJvcnQoY3JlYXRlTmF2aWdhdGlvblJlZGlyZWN0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpOwoKICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHsKICAgICAgICAgICAgdGhpcyQxJDEucmVwbGFjZSh0byk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzJDEkMS5wdXNoKHRvKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gY29uZmlybSB0cmFuc2l0aW9uIGFuZCBwYXNzIG9uIHRoZSB2YWx1ZQogICAgICAgICAgbmV4dCh0byk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgYWJvcnQoZSk7CiAgICB9CiAgfTsKCiAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7CiAgICAvLyB3YWl0IHVudGlsIGFzeW5jIGNvbXBvbmVudHMgYXJlIHJlc29sdmVkIGJlZm9yZQogICAgLy8gZXh0cmFjdGluZyBpbi1jb21wb25lbnQgZW50ZXIgZ3VhcmRzCiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkKTsKICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEkMS5yb3V0ZXIucmVzb2x2ZUhvb2tzKTsKICAgIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcyQxJDEucGVuZGluZyAhPT0gcm91dGUpIHsKICAgICAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSk7CiAgICAgIH0KCiAgICAgIHRoaXMkMSQxLnBlbmRpbmcgPSBudWxsOwogICAgICBvbkNvbXBsZXRlKHJvdXRlKTsKCiAgICAgIGlmICh0aGlzJDEkMS5yb3V0ZXIuYXBwKSB7CiAgICAgICAgdGhpcyQxJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSk7Cn07CgpIaXN0b3J5LnByb3RvdHlwZS51cGRhdGVSb3V0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlKHJvdXRlKSB7CiAgdGhpcy5jdXJyZW50ID0gcm91dGU7CiAgdGhpcy5jYiAmJiB0aGlzLmNiKHJvdXRlKTsKfTsKCkhpc3RvcnkucHJvdG90eXBlLnNldHVwTGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7Ly8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBlbXB0eQp9OwoKSGlzdG9yeS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93bigpIHsKICAvLyBjbGVhbiB1cCBldmVudCBsaXN0ZW5lcnMKICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjM0MQogIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNsZWFudXBMaXN0ZW5lcikgewogICAgY2xlYW51cExpc3RlbmVyKCk7CiAgfSk7CiAgdGhpcy5saXN0ZW5lcnMgPSBbXTsgLy8gcmVzZXQgY3VycmVudCBoaXN0b3J5IHJvdXRlCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyOTQKCiAgdGhpcy5jdXJyZW50ID0gU1RBUlQ7CiAgdGhpcy5wZW5kaW5nID0gbnVsbDsKfTsKCmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkgewogIGlmICghYmFzZSkgewogICAgaWYgKGluQnJvd3NlcikgewogICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWcKICAgICAgdmFyIGJhc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTsKICAgICAgYmFzZSA9IGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJy8nOyAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW4KCiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XC9cL1teXC9dKy8sICcnKTsKICAgIH0gZWxzZSB7CiAgICAgIGJhc2UgPSAnLyc7CiAgICB9CiAgfSAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2gKCgogIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7CiAgICBiYXNlID0gJy8nICsgYmFzZTsKICB9IC8vIHJlbW92ZSB0cmFpbGluZyBzbGFzaAoKCiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXC8kLywgJycpOwp9CgpmdW5jdGlvbiByZXNvbHZlUXVldWUoY3VycmVudCwgbmV4dCkgewogIHZhciBpOwogIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpOwoKICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHsKICAgIGlmIChjdXJyZW50W2ldICE9PSBuZXh0W2ldKSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIHVwZGF0ZWQ6IG5leHQuc2xpY2UoMCwgaSksCiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksCiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKQogIH07Cn0KCmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMocmVjb3JkcywgbmFtZSwgYmluZCwgcmV2ZXJzZSkgewogIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkgewogICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7CgogICAgaWYgKGd1YXJkKSB7CiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGd1YXJkKSA/IGd1YXJkLm1hcChmdW5jdGlvbiAoZ3VhcmQpIHsKICAgICAgICByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOwogICAgICB9KSA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KTsKICAgIH0KICB9KTsKICByZXR1cm4gZmxhdHRlbihyZXZlcnNlID8gZ3VhcmRzLnJldmVyc2UoKSA6IGd1YXJkcyk7Cn0KCmZ1bmN0aW9uIGV4dHJhY3RHdWFyZChkZWYsIGtleSkgewogIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7CiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC4KICAgIGRlZiA9IF9WdWUuZXh0ZW5kKGRlZik7CiAgfQoKICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XTsKfQoKZnVuY3Rpb24gZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSB7CiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKTsKfQoKZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzKHVwZGF0ZWQpIHsKICByZXR1cm4gZXh0cmFjdEd1YXJkcyh1cGRhdGVkLCAnYmVmb3JlUm91dGVVcGRhdGUnLCBiaW5kR3VhcmQpOwp9CgpmdW5jdGlvbiBiaW5kR3VhcmQoZ3VhcmQsIGluc3RhbmNlKSB7CiAgaWYgKGluc3RhbmNlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkKCkgewogICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0KfQoKZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzKGFjdGl2YXRlZCkgewogIHJldHVybiBleHRyYWN0R3VhcmRzKGFjdGl2YXRlZCwgJ2JlZm9yZVJvdXRlRW50ZXInLCBmdW5jdGlvbiAoZ3VhcmQsIF8sIG1hdGNoLCBrZXkpIHsKICAgIHJldHVybiBiaW5kRW50ZXJHdWFyZChndWFyZCwgbWF0Y2gsIGtleSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCh0bywgZnJvbSwgbmV4dCkgewogICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHsKICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGlmICghbWF0Y2guZW50ZXJlZENic1trZXldKSB7CiAgICAgICAgICBtYXRjaC5lbnRlcmVkQ2JzW2tleV0gPSBbXTsKICAgICAgICB9CgogICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XS5wdXNoKGNiKTsKICAgICAgfQoKICAgICAgbmV4dChjYik7CiAgICB9KTsKICB9Owp9Ci8qICAqLwoKCnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovZnVuY3Rpb24gKEhpc3RvcnkpIHsKICBmdW5jdGlvbiBIVE1MNUhpc3Rvcnkocm91dGVyLCBiYXNlKSB7CiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTsKICAgIHRoaXMuX3N0YXJ0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpOwogIH0KCiAgaWYgKEhpc3RvcnkpIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5OwogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUpOwogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIVE1MNUhpc3Rvcnk7CgogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycygpIHsKICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7CgogICAgaWYgKHRoaXMubGlzdGVuZXJzLmxlbmd0aCA+IDApIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjsKICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjsKICAgIHZhciBzdXBwb3J0c1Njcm9sbCA9IHN1cHBvcnRzUHVzaFN0YXRlICYmIGV4cGVjdFNjcm9sbDsKCiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHsKICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChzZXR1cFNjcm9sbCgpKTsKICAgIH0KCiAgICB2YXIgaGFuZGxlUm91dGluZ0V2ZW50ID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgY3VycmVudCA9IHRoaXMkMSQxLmN1cnJlbnQ7IC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdAogICAgICAvLyBoaXN0b3J5IHJvdXRlIG5vdCB1cGRhdGVkIHNpbmNlIGFzeW5jIGd1YXJkIGF0IHRoZSBzYW1lIHRpbWUuCgogICAgICB2YXIgbG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzJDEkMS5iYXNlKTsKCiAgICAgIGlmICh0aGlzJDEkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gdGhpcyQxJDEuX3N0YXJ0TG9jYXRpb24pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMkMSQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7CiAgICAgICAgICBoYW5kbGVTY3JvbGwocm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgaGFuZGxlUm91dGluZ0V2ZW50KTsKICAgIHRoaXMubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVSb3V0aW5nRXZlbnQpOwogICAgfSk7CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvKG4pIHsKICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pOwogIH07CgogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdGhpczsKICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTsKICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMSQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpOwogICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgfSwgb25BYm9ydCk7CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogICAgdmFyIHRoaXMkMSQxID0gdGhpczsKICAgIHZhciByZWYgPSB0aGlzOwogICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50OwogICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkgewogICAgICByZXBsYWNlU3RhdGUoY2xlYW5QYXRoKHRoaXMkMSQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpOwogICAgICBoYW5kbGVTY3JvbGwodGhpcyQxJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7CiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7CiAgICB9LCBvbkFib3J0KTsKICB9OwoKICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTChwdXNoKSB7CiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7CiAgICAgIHZhciBjdXJyZW50ID0gY2xlYW5QYXRoKHRoaXMuYmFzZSArIHRoaXMuY3VycmVudC5mdWxsUGF0aCk7CiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7CiAgICB9CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7CiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKTsKICB9OwoKICByZXR1cm4gSFRNTDVIaXN0b3J5Owp9KEhpc3RvcnkpOwoKZnVuY3Rpb24gZ2V0TG9jYXRpb24oYmFzZSkgewogIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lOwogIHZhciBwYXRoTG93ZXJDYXNlID0gcGF0aC50b0xvd2VyQ2FzZSgpOwogIHZhciBiYXNlTG93ZXJDYXNlID0gYmFzZS50b0xvd2VyQ2FzZSgpOyAvLyBiYXNlPSIvYSIgc2hvdWxkbid0IHR1cm4gcGF0aD0iL2FwcCIgaW50byAiL2EvcHAiCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzM1NTUKICAvLyBzbyB3ZSBlbnN1cmUgdGhlIHRyYWlsaW5nIHNsYXNoIGluIHRoZSBiYXNlCgogIGlmIChiYXNlICYmIChwYXRoTG93ZXJDYXNlID09PSBiYXNlTG93ZXJDYXNlIHx8IHBhdGhMb3dlckNhc2UuaW5kZXhPZihjbGVhblBhdGgoYmFzZUxvd2VyQ2FzZSArICcvJykpID09PSAwKSkgewogICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpOwogIH0KCiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2g7Cn0KLyogICovCgoKdmFyIEhhc2hIaXN0b3J5ID0gLypAX19QVVJFX18qL2Z1bmN0aW9uIChIaXN0b3J5KSB7CiAgZnVuY3Rpb24gSGFzaEhpc3Rvcnkocm91dGVyLCBiYXNlLCBmYWxsYmFjaykgewogICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7IC8vIGNoZWNrIGhpc3RvcnkgZmFsbGJhY2sgZGVlcGxpbmtpbmcKCiAgICBpZiAoZmFsbGJhY2sgJiYgY2hlY2tGYWxsYmFjayh0aGlzLmJhc2UpKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBlbnN1cmVTbGFzaCgpOwogIH0KCiAgaWYgKEhpc3RvcnkpIEhhc2hIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7CiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlKTsKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTsgLy8gdGhpcyBpcyBkZWxheWVkIHVudGlsIHRoZSBhcHAgbW91bnRzCiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5CgogIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzKCkgewogICAgdmFyIHRoaXMkMSQxID0gdGhpczsKCiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyOwogICAgdmFyIGV4cGVjdFNjcm9sbCA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yOwogICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsOwoKICAgIGlmIChzdXBwb3J0c1Njcm9sbCkgewogICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHNldHVwU2Nyb2xsKCkpOwogICAgfQoKICAgIHZhciBoYW5kbGVSb3V0aW5nRXZlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxJDEuY3VycmVudDsKCiAgICAgIGlmICghZW5zdXJlU2xhc2goKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcyQxJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7CiAgICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7CiAgICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgdmFyIGV2ZW50VHlwZSA9IHN1cHBvcnRzUHVzaFN0YXRlID8gJ3BvcHN0YXRlJyA6ICdoYXNoY2hhbmdlJzsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlUm91dGluZ0V2ZW50KTsKICAgIHRoaXMubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZVJvdXRpbmdFdmVudCk7CiAgICB9KTsKICB9OwoKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdGhpczsKICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpOwogICAgICBoYW5kbGVTY3JvbGwodGhpcyQxJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7CiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7CiAgICB9LCBvbkFib3J0KTsKICB9OwoKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdGhpczsKICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpOwogICAgICBoYW5kbGVTY3JvbGwodGhpcyQxJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7CiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7CiAgICB9LCBvbkFib3J0KTsKICB9OwoKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyhuKSB7CiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTsKICB9OwoKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMKHB1c2gpIHsKICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoOwoKICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHsKICAgICAgcHVzaCA/IHB1c2hIYXNoKGN1cnJlbnQpIDogcmVwbGFjZUhhc2goY3VycmVudCk7CiAgICB9CiAgfTsKCiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHsKICAgIHJldHVybiBnZXRIYXNoKCk7CiAgfTsKCiAgcmV0dXJuIEhhc2hIaXN0b3J5Owp9KEhpc3RvcnkpOwoKZnVuY3Rpb24gY2hlY2tGYWxsYmFjayhiYXNlKSB7CiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7CgogIGlmICghL15cLyMvLnRlc3QobG9jYXRpb24pKSB7CiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShjbGVhblBhdGgoYmFzZSArICcvIycgKyBsb2NhdGlvbikpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgpmdW5jdGlvbiBlbnN1cmVTbGFzaCgpIHsKICB2YXIgcGF0aCA9IGdldEhhc2goKTsKCiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnLycpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7CiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBnZXRIYXNoKCkgewogIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3QKICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IQogIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgdmFyIGluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7IC8vIGVtcHR5IHBhdGgKCiAgaWYgKGluZGV4IDwgMCkgewogICAgcmV0dXJuICcnOwogIH0KCiAgaHJlZiA9IGhyZWYuc2xpY2UoaW5kZXggKyAxKTsKICByZXR1cm4gaHJlZjsKfQoKZnVuY3Rpb24gZ2V0VXJsKHBhdGgpIHsKICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogIHZhciBpID0gaHJlZi5pbmRleE9mKCcjJyk7CiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjsKICByZXR1cm4gYmFzZSArICIjIiArIHBhdGg7Cn0KCmZ1bmN0aW9uIHB1c2hIYXNoKHBhdGgpIHsKICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHsKICAgIHB1c2hTdGF0ZShnZXRVcmwocGF0aCkpOwogIH0gZWxzZSB7CiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7CiAgfQp9CgpmdW5jdGlvbiByZXBsYWNlSGFzaChwYXRoKSB7CiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7CiAgICByZXBsYWNlU3RhdGUoZ2V0VXJsKHBhdGgpKTsKICB9IGVsc2UgewogICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoZ2V0VXJsKHBhdGgpKTsKICB9Cn0KLyogICovCgoKdmFyIEFic3RyYWN0SGlzdG9yeSA9IC8qQF9fUFVSRV9fKi9mdW5jdGlvbiAoSGlzdG9yeSkgewogIGZ1bmN0aW9uIEFic3RyYWN0SGlzdG9yeShyb3V0ZXIsIGJhc2UpIHsKICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpOwogICAgdGhpcy5zdGFjayA9IFtdOwogICAgdGhpcy5pbmRleCA9IC0xOwogIH0KCiAgaWYgKEhpc3RvcnkpIEFic3RyYWN0SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5OwogIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUpOwogIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7CgogIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgIHRoaXMkMSQxLnN0YWNrID0gdGhpcyQxJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxJDEuaW5kZXggKyAxKS5jb25jYXQocm91dGUpOwogICAgICB0aGlzJDEkMS5pbmRleCsrOwogICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgfSwgb25BYm9ydCk7CiAgfTsKCiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogICAgdmFyIHRoaXMkMSQxID0gdGhpczsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgdGhpcyQxJDEuc3RhY2sgPSB0aGlzJDEkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEkMS5pbmRleCkuY29uY2F0KHJvdXRlKTsKICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTsKICAgIH0sIG9uQWJvcnQpOwogIH07CgogIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyhuKSB7CiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzOwogICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5pbmRleCArIG47CgogICAgaWYgKHRhcmdldEluZGV4IDwgMCB8fCB0YXJnZXRJbmRleCA+PSB0aGlzLnN0YWNrLmxlbmd0aCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07CiAgICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKHJvdXRlLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBwcmV2ID0gdGhpcyQxJDEuY3VycmVudDsKICAgICAgdGhpcyQxJDEuaW5kZXggPSB0YXJnZXRJbmRleDsKICAgICAgdGhpcyQxJDEudXBkYXRlUm91dGUocm91dGUpOwogICAgICB0aGlzJDEkMS5yb3V0ZXIuYWZ0ZXJIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7CiAgICAgICAgaG9vayAmJiBob29rKHJvdXRlLCBwcmV2KTsKICAgICAgfSk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQpKSB7CiAgICAgICAgdGhpcyQxJDEuaW5kZXggPSB0YXJnZXRJbmRleDsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7CiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTsKICAgIHJldHVybiBjdXJyZW50ID8gY3VycmVudC5mdWxsUGF0aCA6ICcvJzsKICB9OwoKICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCgpIHsvLyBub29wCiAgfTsKCiAgcmV0dXJuIEFic3RyYWN0SGlzdG9yeTsKfShIaXN0b3J5KTsKLyogICovCgoKdmFyIFZ1ZVJvdXRlciA9IGZ1bmN0aW9uIFZ1ZVJvdXRlcihvcHRpb25zKSB7CiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgb3B0aW9ucyA9IHt9OwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgd2Fybih0aGlzIGluc3RhbmNlb2YgVnVlUm91dGVyLCAiUm91dGVyIG11c3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBvcGVyYXRvci4iKTsKICB9CgogIHRoaXMuYXBwID0gbnVsbDsKICB0aGlzLmFwcHMgPSBbXTsKICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogIHRoaXMuYmVmb3JlSG9va3MgPSBbXTsKICB0aGlzLnJlc29sdmVIb29rcyA9IFtdOwogIHRoaXMuYWZ0ZXJIb29rcyA9IFtdOwogIHRoaXMubWF0Y2hlciA9IGNyZWF0ZU1hdGNoZXIob3B0aW9ucy5yb3V0ZXMgfHwgW10sIHRoaXMpOwogIHZhciBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdoYXNoJzsKICB0aGlzLmZhbGxiYWNrID0gbW9kZSA9PT0gJ2hpc3RvcnknICYmICFzdXBwb3J0c1B1c2hTdGF0ZSAmJiBvcHRpb25zLmZhbGxiYWNrICE9PSBmYWxzZTsKCiAgaWYgKHRoaXMuZmFsbGJhY2spIHsKICAgIG1vZGUgPSAnaGFzaCc7CiAgfQoKICBpZiAoIWluQnJvd3NlcikgewogICAgbW9kZSA9ICdhYnN0cmFjdCc7CiAgfQoKICB0aGlzLm1vZGUgPSBtb2RlOwoKICBzd2l0Y2ggKG1vZGUpIHsKICAgIGNhc2UgJ2hpc3RvcnknOgogICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSFRNTDVIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgJ2hhc2gnOgogICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSGFzaEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlLCB0aGlzLmZhbGxiYWNrKTsKICAgICAgYnJlYWs7CgogICAgY2FzZSAnYWJzdHJhY3QnOgogICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7CiAgICAgIGJyZWFrOwoKICAgIGRlZmF1bHQ6CiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgYXNzZXJ0KGZhbHNlLCAiaW52YWxpZCBtb2RlOiAiICsgbW9kZSk7CiAgICAgIH0KCiAgfQp9OwoKdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsKICBjdXJyZW50Um91dGU6IHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0KfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKSB7CiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKTsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5jdXJyZW50Um91dGUuZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnQ7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0KGFwcAovKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovCikgewogIHZhciB0aGlzJDEkMSA9IHRoaXM7CiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnQoaW5zdGFsbC5pbnN0YWxsZWQsICJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCAiICsgImJlZm9yZSBjcmVhdGluZyByb290IGluc3RhbmNlLiIpOwogIHRoaXMuYXBwcy5wdXNoKGFwcCk7IC8vIHNldCB1cCBhcHAgZGVzdHJveWVkIGhhbmRsZXIKICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOQoKICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgewogICAgLy8gY2xlYW4gb3V0IGFwcCBmcm9tIHRoaXMuYXBwcyBhcnJheSBvbmNlIGRlc3Ryb3llZAogICAgdmFyIGluZGV4ID0gdGhpcyQxJDEuYXBwcy5pbmRleE9mKGFwcCk7CgogICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgdGhpcyQxJDEuYXBwcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSAvLyBlbnN1cmUgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gYXBwIG9yIG51bGwgaWYgbm8gYXBwcwogICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkCgoKICAgIGlmICh0aGlzJDEkMS5hcHAgPT09IGFwcCkgewogICAgICB0aGlzJDEkMS5hcHAgPSB0aGlzJDEkMS5hcHBzWzBdIHx8IG51bGw7CiAgICB9CgogICAgaWYgKCF0aGlzJDEkMS5hcHApIHsKICAgICAgdGhpcyQxJDEuaGlzdG9yeS50ZWFyZG93bigpOwogICAgfQogIH0pOyAvLyBtYWluIGFwcCBwcmV2aW91c2x5IGluaXRpYWxpemVkCiAgLy8gcmV0dXJuIGFzIHdlIGRvbid0IG5lZWQgdG8gc2V0IHVwIG5ldyBoaXN0b3J5IGxpc3RlbmVyCgogIGlmICh0aGlzLmFwcCkgewogICAgcmV0dXJuOwogIH0KCiAgdGhpcy5hcHAgPSBhcHA7CiAgdmFyIGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7CgogIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5IHx8IGhpc3RvcnkgaW5zdGFuY2VvZiBIYXNoSGlzdG9yeSkgewogICAgdmFyIGhhbmRsZUluaXRpYWxTY3JvbGwgPSBmdW5jdGlvbiAocm91dGVPckVycm9yKSB7CiAgICAgIHZhciBmcm9tID0gaGlzdG9yeS5jdXJyZW50OwogICAgICB2YXIgZXhwZWN0U2Nyb2xsID0gdGhpcyQxJDEub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjsKICAgICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsOwoKICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsICYmICdmdWxsUGF0aCcgaW4gcm91dGVPckVycm9yKSB7CiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMSQxLCByb3V0ZU9yRXJyb3IsIGZyb20sIGZhbHNlKTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocm91dGVPckVycm9yKSB7CiAgICAgIGhpc3Rvcnkuc2V0dXBMaXN0ZW5lcnMoKTsKICAgICAgaGFuZGxlSW5pdGlhbFNjcm9sbChyb3V0ZU9yRXJyb3IpOwogICAgfTsKCiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpLCBzZXR1cExpc3RlbmVycywgc2V0dXBMaXN0ZW5lcnMpOwogIH0KCiAgaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKHJvdXRlKSB7CiAgICB0aGlzJDEkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkgewogICAgICBhcHAuX3JvdXRlID0gcm91dGU7CiAgICB9KTsKICB9KTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2goZm4pIHsKICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlUmVzb2x2ZSA9IGZ1bmN0aW9uIGJlZm9yZVJlc29sdmUoZm4pIHsKICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaChmbikgewogIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5hZnRlckhvb2tzLCBmbik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5KGNiLCBlcnJvckNiKSB7CiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpOwp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihlcnJvckNiKSB7CiAgdGhpcy5oaXN0b3J5Lm9uRXJyb3IoZXJyb3JDYik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7CiAgdmFyIHRoaXMkMSQxID0gdGhpczsgLy8gJGZsb3ctZGlzYWJsZS1saW5lCgogIGlmICghb25Db21wbGV0ZSAmJiAhb25BYm9ydCAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHRoaXMkMSQxLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICB0aGlzLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7CiAgfQp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogIHZhciB0aGlzJDEkMSA9IHRoaXM7IC8vICRmbG93LWRpc2FibGUtbGluZQoKICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB0aGlzJDEkMS5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7CiAgICB9KTsKICB9IGVsc2UgewogICAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpOwogIH0KfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyhuKSB7CiAgdGhpcy5oaXN0b3J5LmdvKG4pOwp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24gYmFjaygpIHsKICB0aGlzLmdvKC0xKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQoKSB7CiAgdGhpcy5nbygxKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyh0bykgewogIHZhciByb3V0ZSA9IHRvID8gdG8ubWF0Y2hlZCA/IHRvIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZSA6IHRoaXMuY3VycmVudFJvdXRlOwoKICBpZiAoIXJvdXRlKSB7CiAgICByZXR1cm4gW107CiAgfQoKICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCByb3V0ZS5tYXRjaGVkLm1hcChmdW5jdGlvbiAobSkgewogICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmV0dXJuIG0uY29tcG9uZW50c1trZXldOwogICAgfSk7CiAgfSkpOwp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh0bywgY3VycmVudCwgYXBwZW5kKSB7CiAgY3VycmVudCA9IGN1cnJlbnQgfHwgdGhpcy5oaXN0b3J5LmN1cnJlbnQ7CiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24odG8sIGN1cnJlbnQsIGFwcGVuZCwgdGhpcyk7CiAgdmFyIHJvdXRlID0gdGhpcy5tYXRjaChsb2NhdGlvbiwgY3VycmVudCk7CiAgdmFyIGZ1bGxQYXRoID0gcm91dGUucmVkaXJlY3RlZEZyb20gfHwgcm91dGUuZnVsbFBhdGg7CiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTsKICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYoYmFzZSwgZnVsbFBhdGgsIHRoaXMubW9kZSk7CiAgcmV0dXJuIHsKICAgIGxvY2F0aW9uOiBsb2NhdGlvbiwKICAgIHJvdXRlOiByb3V0ZSwKICAgIGhyZWY6IGhyZWYsCiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdAogICAgbm9ybWFsaXplZFRvOiBsb2NhdGlvbiwKICAgIHJlc29sdmVkOiByb3V0ZQogIH07Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmdldFJvdXRlcyA9IGZ1bmN0aW9uIGdldFJvdXRlcygpIHsKICByZXR1cm4gdGhpcy5tYXRjaGVyLmdldFJvdXRlcygpOwp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZSA9IGZ1bmN0aW9uIGFkZFJvdXRlKHBhcmVudE9yUm91dGUsIHJvdXRlKSB7CiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlKHBhcmVudE9yUm91dGUsIHJvdXRlKTsKCiAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50ICE9PSBTVEFSVCkgewogICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpOwogIH0KfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzKHJvdXRlcykgewogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICB3YXJuKGZhbHNlLCAncm91dGVyLmFkZFJvdXRlcygpIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIFJvdXRlciA0LiBVc2Ugcm91dGVyLmFkZFJvdXRlKCkgaW5zdGVhZC4nKTsKICB9CgogIHRoaXMubWF0Y2hlci5hZGRSb3V0ZXMocm91dGVzKTsKCiAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50ICE9PSBTVEFSVCkgewogICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpOwogIH0KfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZ1ZVJvdXRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyk7CnZhciBWdWVSb3V0ZXIkMSA9IFZ1ZVJvdXRlcjsKCmZ1bmN0aW9uIHJlZ2lzdGVySG9vayhsaXN0LCBmbikgewogIGxpc3QucHVzaChmbik7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBpID0gbGlzdC5pbmRleE9mKGZuKTsKCiAgICBpZiAoaSA+IC0xKSB7CiAgICAgIGxpc3Quc3BsaWNlKGksIDEpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGNyZWF0ZUhyZWYoYmFzZSwgZnVsbFBhdGgsIG1vZGUpIHsKICB2YXIgcGF0aCA9IG1vZGUgPT09ICdoYXNoJyA/ICcjJyArIGZ1bGxQYXRoIDogZnVsbFBhdGg7CiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aDsKfSAvLyBXZSBjYW5ub3QgcmVtb3ZlIHRoaXMgYXMgaXQgd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2UKCgpWdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7ClZ1ZVJvdXRlci52ZXJzaW9uID0gJzMuNi40JzsKVnVlUm91dGVyLmlzTmF2aWdhdGlvbkZhaWx1cmUgPSBpc05hdmlnYXRpb25GYWlsdXJlOwpWdWVSb3V0ZXIuTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gTmF2aWdhdGlvbkZhaWx1cmVUeXBlOwpWdWVSb3V0ZXIuU1RBUlRfTE9DQVRJT04gPSBTVEFSVDsKCmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkgewogIHdpbmRvdy5WdWUudXNlKFZ1ZVJvdXRlcik7Cn0KCnZhciB2ZXJzaW9uID0gJzMuNi40JzsKZXhwb3J0IHsgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLCBMaW5rIGFzIFJvdXRlckxpbmssIFZpZXcgYXMgUm91dGVyVmlldywgU1RBUlQgYXMgU1RBUlRfTE9DQVRJT04sIFZ1ZVJvdXRlciQxIGFzIGRlZmF1bHQsIGlzTmF2aWdhdGlvbkZhaWx1cmUsIHZlcnNpb24gfTs="},null]}