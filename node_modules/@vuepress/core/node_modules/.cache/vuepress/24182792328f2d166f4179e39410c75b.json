{"remainingRequest":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/@vssue/api-github-v4/lib/index.js","dependencies":[{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/@vssue/api-github-v4/lib/index.js","mtime":1661659638384},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1661658709451},{"path":"/Users/mengyu/vuepress-starter/vuepress-starter/node_modules/babel-loader/lib/index.js","mtime":1661658709446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwppbXBvcnQgeyBidWlsZFVSTCwgY29uY2F0VVJMLCBnZXRDbGVhblVSTCwgcGFyc2VRdWVyeSB9IGZyb20gJ0B2c3N1ZS91dGlscyc7CmltcG9ydCB7IG5vcm1hbGl6ZVVzZXIsIG5vcm1hbGl6ZUlzc3VlLCBub3JtYWxpemVDb21tZW50LCBub3JtYWxpemVSZWFjdGlvbnMsIG1hcFJlYWN0aW9uTmFtZSB9IGZyb20gJy4vdXRpbHMnOwovKioKICogR2l0aHViIEdyYXBoUUwgQVBJIHY0CiAqCiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC8KICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L2V4cGxvcmVyLwogKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vYXBwcy9idWlsZGluZy1vYXV0aC1hcHBzLwogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdGh1YlY0IHsKICBjb25zdHJ1Y3Rvcih7CiAgICBiYXNlVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbScsCiAgICBvd25lciwKICAgIHJlcG8sCiAgICBsYWJlbHMsCiAgICBjbGllbnRJZCwKICAgIGNsaWVudFNlY3JldCwKICAgIHN0YXRlLAogICAgcHJveHkKICB9KSB7CiAgICBpZiAodHlwZW9mIGNsaWVudFNlY3JldCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb3h5ID09PSAndW5kZWZpbmVkJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsaWVudFNlY3JldCBhbmQgcHJveHkgaXMgcmVxdWlyZWQgZm9yIEdpdEh1YiBWNCcpOwogICAgfQoKICAgIHRoaXMuYmFzZVVSTCA9IGJhc2VVUkw7CiAgICB0aGlzLm93bmVyID0gb3duZXI7CiAgICB0aGlzLnJlcG8gPSByZXBvOwogICAgdGhpcy5sYWJlbHMgPSBsYWJlbHM7CiAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7CiAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDsKICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTsKICAgIHRoaXMucHJveHkgPSBwcm94eTsKICAgIHRoaXMuX3BhZ2VJbmZvID0gewogICAgICBwYWdlOiAxLAogICAgICBzdGFydEN1cnNvcjogbnVsbCwKICAgICAgZW5kQ3Vyc29yOiBudWxsLAogICAgICBzb3J0OiBudWxsLAogICAgICBwZXJQYWdlOiBudWxsCiAgICB9OwogICAgdGhpcy5faXNzdWVOb2RlSWQgPSBudWxsOwogICAgdGhpcy4kaHR0cCA9IGF4aW9zLmNyZWF0ZSh7CiAgICAgIGJhc2VVUkw6IGJhc2VVUkwgPT09ICdodHRwczovL2dpdGh1Yi5jb20nID8gJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20nIDogY29uY2F0VVJMKGJhc2VVUkwsICdhcGknKSwKICAgICAgaGVhZGVyczogewogICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicKICAgICAgfQogICAgfSk7CiAgICB0aGlzLiRodHRwLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UocmVzcG9uc2UgPT4gewogICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZS5kYXRhLmVycm9yX2Rlc2NyaXB0aW9uKTsKICAgICAgfQoKICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlLmRhdGEuZXJyb3JzWzBdLm1lc3NhZ2UpOwogICAgICB9CgogICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9KTsKICB9CiAgLyoqCiAgICogVGhlIHBsYXRmb3JtIGFwaSBpbmZvCiAgICovCgoKICBnZXQgcGxhdGZvcm0oKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAnR2l0SHViJywKICAgICAgbGluazogdGhpcy5iYXNlVVJMLAogICAgICB2ZXJzaW9uOiAndjQnLAogICAgICBtZXRhOiB7CiAgICAgICAgcmVhY3RhYmxlOiB0cnVlLAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0KICAgIH07CiAgfQogIC8qKgogICAqIFJlZGlyZWN0IHRvIHRoZSBhdXRob3JpemF0aW9uIHBhZ2Ugb2YgcGxhdGZvcm0uCiAgICoKICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vYXBwcy9idWlsZGluZy1vYXV0aC1hcHBzL2F1dGhvcml6aW5nLW9hdXRoLWFwcHMvIzEtcmVxdWVzdC1hLXVzZXJzLWdpdGh1Yi1pZGVudGl0eQogICAqLwoKCiAgcmVkaXJlY3RBdXRoKCkgewogICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBidWlsZFVSTChjb25jYXRVUkwodGhpcy5iYXNlVVJMLCAnbG9naW4vb2F1dGgvYXV0aG9yaXplJyksIHsKICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLAogICAgICByZWRpcmVjdF91cmk6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICBzY29wZTogJ3B1YmxpY19yZXBvJywKICAgICAgc3RhdGU6IHRoaXMuc3RhdGUKICAgIH0pOwogIH0KICAvKioKICAgKiBIYW5kbGUgYXV0aG9yaXphdGlvbi4KICAgKgogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS9hcHBzL2J1aWxkaW5nLW9hdXRoLWFwcHMvYXV0aG9yaXppbmctb2F1dGgtYXBwcy8KICAgKgogICAqIEByZW1hcmtzCiAgICogSWYgdGhlIGBjb2RlYCBhbmQgYHN0YXRlYCBleGlzdCBpbiB0aGUgcXVlcnksIGFuZCB0aGUgYHN0YXRlYCBtYXRjaGVzLCByZW1vdmUgdGhlbSBmcm9tIHF1ZXJ5LCBhbmQgdHJ5IHRvIGdldCB0aGUgYWNjZXNzIHRva2VuLgogICAqLwoKCiAgYXN5bmMgaGFuZGxlQXV0aCgpIHsKICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTsKCiAgICBpZiAocXVlcnkuY29kZSkgewogICAgICBpZiAocXVlcnkuc3RhdGUgIT09IHRoaXMuc3RhdGUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgY29uc3QgY29kZSA9IHF1ZXJ5LmNvZGU7CiAgICAgIGRlbGV0ZSBxdWVyeS5jb2RlOwogICAgICBkZWxldGUgcXVlcnkuc3RhdGU7CiAgICAgIGNvbnN0IHJlcGxhY2VVUkwgPSBidWlsZFVSTChnZXRDbGVhblVSTCh3aW5kb3cubG9jYXRpb24uaHJlZiksIHF1ZXJ5KSArIHdpbmRvdy5sb2NhdGlvbi5oYXNoOwogICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHJlcGxhY2VVUkwpOwogICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuZ2V0QWNjZXNzVG9rZW4oewogICAgICAgIGNvZGUKICAgICAgfSk7CiAgICAgIHJldHVybiBhY2Nlc3NUb2tlbjsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CiAgLyoqCiAgICogR2V0IHVzZXIgYWNjZXNzIHRva2VuIHZpYSBgY29kZWAKICAgKgogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS9hcHBzL2J1aWxkaW5nLW9hdXRoLWFwcHMvYXV0aG9yaXppbmctb2F1dGgtYXBwcy8jMi11c2Vycy1hcmUtcmVkaXJlY3RlZC1iYWNrLXRvLXlvdXItc2l0ZS1ieS1naXRodWIKICAgKi8KCgogIGFzeW5jIGdldEFjY2Vzc1Rva2VuKHsKICAgIGNvZGUKICB9KSB7CiAgICAvKioKICAgICAqIGFjY2Vzc190b2tlbiBhcGkgZG9lcyBub3Qgc3VwcG9ydCBjb3JzCiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvZ2l0aHViL2lzc3Vlcy8zMzAKICAgICAqLwogICAgY29uc3Qgb3JpZ2luYWxVUkwgPSBjb25jYXRVUkwodGhpcy5iYXNlVVJMLCAnbG9naW4vb2F1dGgvYWNjZXNzX3Rva2VuJyk7CiAgICBjb25zdCBwcm94eVVSTCA9IHR5cGVvZiB0aGlzLnByb3h5ID09PSAnZnVuY3Rpb24nID8gdGhpcy5wcm94eShvcmlnaW5hbFVSTCkgOiB0aGlzLnByb3h5OwogICAgY29uc3QgewogICAgICBkYXRhCiAgICB9ID0gYXdhaXQgdGhpcy4kaHR0cC5wb3N0KHByb3h5VVJMLCB7CiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCwKICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5jbGllbnRTZWNyZXQsCiAgICAgIGNvZGUKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGRhdGEuYWNjZXNzX3Rva2VuOwogIH0KICAvKioKICAgKiBHZXQgdGhlIGxvZ2dlZC1pbiB1c2VyIHdpdGggYWNjZXNzIHRva2VuLgogICAqCiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L3F1ZXJ5LyB2aWV3ZXIKICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjQvb2JqZWN0L3VzZXIvCiAgICovCgoKICBhc3luYyBnZXRVc2VyKHsKICAgIGFjY2Vzc1Rva2VuCiAgfSkgewogICAgY29uc3QgewogICAgICBkYXRhCiAgICB9ID0gYXdhaXQgdGhpcy4kaHR0cC5wb3N0KCdncmFwaHFsJywgewogICAgICBxdWVyeTogYFwKcXVlcnkgZ2V0VXNlciB7CiAgdmlld2VyIHsKICAgIGxvZ2luCiAgICBhdmF0YXJVcmwKICAgIHVybAogIH0KfWAKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbm9ybWFsaXplVXNlcihkYXRhLmRhdGEudmlld2VyKTsKICB9CiAgLyoqCiAgICogR2V0IGlzc3VlIG9mIHRoaXMgcGFnZSBhY2NvcmRpbmcgdG8gdGhlIGlzc3VlIGlkIG9yIHRoZSBpc3N1ZSB0aXRsZQogICAqCiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L29iamVjdC9yZXBvc2l0b3J5LwogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC9vYmplY3QvaXNzdWVjb25uZWN0aW9uLwogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC9vYmplY3QvaXNzdWUvCiAgICoKICAgKiBAcmVtYXJrcwogICAqIFRoZSBJc3N1ZUNvbm5lY3Rpb24gZG9lcyBub3QgaGF2ZSB0aXRsZSBmaWx0ZXIgZm9yIG5vdywgYW5kIHRoZSBudW1iZXIgb2YgcmVzdWx0cyBpcyBsaW1pdGVkIHRvIDEwMC4KICAgKiBGb3Igbm93LCBpZiBpc3N1ZXMgd2l0aCB0aGUgbGFiZWxzIGFyZSBtb3JlIHRoYW4gMTAwLCB3ZSBoYXZlIHRvIHJlcXVlc3QgdGhlIG5leHQgcGFnZShub3QgaW1wbGVtZW50ZWQgeWV0KS4KICAgKi8KCgogIGFzeW5jIGdldElzc3VlKHsKICAgIGFjY2Vzc1Rva2VuLAogICAgaXNzdWVJZCwKICAgIGlzc3VlVGl0bGUKICB9KSB7CiAgICBjb25zdCBvcHRpb25zID0ge307CgogICAgaWYgKGFjY2Vzc1Rva2VuKSB7CiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHsKICAgICAgICBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gCiAgICAgIH07CiAgICB9CgogICAgaWYgKGlzc3VlSWQpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICBkYXRhCiAgICAgICAgfSA9IGF3YWl0IHRoaXMuJGh0dHAucG9zdChgZ3JhcGhxbGAsIHsKICAgICAgICAgIHF1ZXJ5OiBgXApxdWVyeSBnZXRJc3N1ZUJ5SWQgewogIHJlcG9zaXRvcnkob3duZXI6ICIke3RoaXMub3duZXJ9IiwgbmFtZTogIiR7dGhpcy5yZXBvfSIpIHsKICAgIGlzc3VlIChudW1iZXI6ICR7aXNzdWVJZH0pIHsKICAgICAgaWQKICAgICAgbnVtYmVyCiAgICAgIHRpdGxlCiAgICAgIGJvZHkKICAgICAgdXJsCiAgICB9CiAgfQp9YAogICAgICAgIH0sIG9wdGlvbnMpOyAvLyBwb3N0Q29tbWVudCBuZWVkcyBpc3N1ZSBOb2RlSWQsIHNvIHdlIHN0b3JlIGl0IGludGVybmFsbHkKCiAgICAgICAgdGhpcy5faXNzdWVOb2RlSWQgPSBkYXRhLmRhdGEucmVwb3NpdG9yeS5pc3N1ZS5pZDsKICAgICAgICByZXR1cm4gbm9ybWFsaXplSXNzdWUoZGF0YS5kYXRhLnJlcG9zaXRvcnkuaXNzdWUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaWYgKGUucmVzcG9uc2UgJiYgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb25zdCBxdWVyeSA9IFtgIiR7aXNzdWVUaXRsZX0iYCwgYGluOnRpdGxlYCwgYHJlcG86JHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb31gLCBgaXM6cHVibGljYCwgLi4udGhpcy5sYWJlbHMubWFwKGxhYmVsID0+IGBsYWJlbDoke2xhYmVsfWApXS5qb2luKCcgJyk7CiAgICAgIGNvbnN0IHsKICAgICAgICBkYXRhCiAgICAgIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYGdyYXBocWxgLCB7CiAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICBxdWVyeQogICAgICAgIH0sCiAgICAgICAgcXVlcnk6IGBcCnF1ZXJ5IGdldElzc3VlQnlUaXRsZSgKICAkcXVlcnk6IFN0cmluZyEKKSB7CiAgc2VhcmNoKAogICAgcXVlcnk6ICRxdWVyeQogICAgdHlwZTogSVNTVUUKICAgIGZpcnN0OiAyMAogICAgKSB7CiAgICAgIG5vZGVzIHsKICAgICAgLi4uIG9uIElzc3VlIHsKICAgICAgICBpZAogICAgICAgIG51bWJlcgogICAgICAgIHRpdGxlCiAgICAgICAgYm9keQogICAgICAgIHVybAogICAgICB9CiAgICB9CiAgfQp9YAogICAgICB9LCBvcHRpb25zKTsKICAgICAgY29uc3QgaXNzdWUgPSBkYXRhLmRhdGEuc2VhcmNoLm5vZGVzLmZpbmQoaXRlbSA9PiBpdGVtLnRpdGxlID09PSBpc3N1ZVRpdGxlKTsgLy8gcG9zdENvbW1lbnQgbmVlZHMgaXNzdWUgTm9kZUlkLCBzbyB3ZSBzdG9yZSBpdCBpbnRlcm5hbGx5CgogICAgICBpZiAoaXNzdWUpIHsKICAgICAgICB0aGlzLl9pc3N1ZU5vZGVJZCA9IGlzc3VlLmlkOwogICAgICAgIHJldHVybiBub3JtYWxpemVJc3N1ZShpc3N1ZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KICAvKioKICAgKiBDcmVhdGUgYSBuZXcgaXNzdWUKICAgKgogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC9tdXRhdGlvbi9jcmVhdGVpc3N1ZS8KICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjQvaW5wdXRfb2JqZWN0L2NyZWF0ZWlzc3VlaW5wdXQvCiAgICoKICAgKiBAcmVtYXJrcwogICAqIENyZWF0aW5nIGlzc3VlIHJlcXVpcmVzIHJlcG9zaXRvcnlJZCwgd2hpY2ggc2hvdWxkIGJlIHJlcXVlc3RlZCBpbiBhbiBleHRyYSByZXF1ZXN0LgogICAqIENyZWF0aW5nIGlzc3VlIHdpdGggbGFiZWxzIHJlcXVpcmVzIGxhYmVsSWRzLCB3aGljaCBzaG91bGQgYmUgcmVxdWVzdGVkIGluIGFuIGV4dHJhIHJlcXVlc3QsIG9yIGNyZWF0ZSB0aGUgbGFiZWwgaWYgaXQgZG9lcyBub3QgZXhpc3QuCiAgICogRW5kcG9pbnRzIGZvciBjcmVhdGluZyBsYWJlbHMgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGJ5IEdpdEh1YiB5ZXQgKHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L211dGF0aW9uL2NyZWF0ZWxhYmVsLykKICAgKgogICAqIEZvciB0aGVzZSByZWFzb25zLCBmYWxsYmFjayB0byB2MyBmb3Igbm93CiAgICovCgoKICBhc3luYyBwb3N0SXNzdWUoewogICAgYWNjZXNzVG9rZW4sCiAgICB0aXRsZSwKICAgIGNvbnRlbnQKICB9KSB7CiAgICBjb25zdCB7CiAgICAgIGRhdGEKICAgIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlc2AsIHsKICAgICAgdGl0bGUsCiAgICAgIGJvZHk6IGNvbnRlbnQsCiAgICAgIGxhYmVsczogdGhpcy5sYWJlbHMKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAKICAgICAgfQogICAgfSk7IC8vIGBodG1sX3VybGAgaW4gdjMKICAgIC8vIGB1cmxgIGluIHY0CgogICAgZGF0YS51cmwgPSBkYXRhLmh0bWxfdXJsOyAvLyBwb3N0Q29tbWVudCBuZWVkcyBpc3N1ZSBOb2RlSWQsIHNvIHdlIHN0b3JlIGl0IGludGVybmFsbHkKCiAgICB0aGlzLl9pc3N1ZU5vZGVJZCA9IGRhdGEubm9kZV9pZDsKICAgIHJldHVybiBub3JtYWxpemVJc3N1ZShkYXRhKTsKICB9CiAgLyoqCiAgICogR2V0IGNvbW1lbnRzIG9mIHRoaXMgcGFnZSBhY2NvcmRpbmcgdG8gdGhlIGlzc3VlIGlkCiAgICoKICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjQvb2JqZWN0L2lzc3VlY29tbWVudGNvbm5lY3Rpb24vCiAgICoKICAgKiBAcmVtYXJrcwogICAqIE5vIG9mZnNldCBpbXBsZW1lbnRlZCwgc28gaXQncyBkaWZmaWN1bHQgdG8gaW1wbGVtZW50IFJFU1QtbGlrZSBwYWdpbmF0aW9uCiAgICogRm9yIG5vdywgd2UgdXNlIGFuIGludGVybmFsIGBfcGFnZUluZm9gIHZhciB0byBoYWNrIHRoYXQKICAgKi8KCgogIGFzeW5jIGdldENvbW1lbnRzKHsKICAgIGFjY2Vzc1Rva2VuLAogICAgaXNzdWVJZCwKICAgIHF1ZXJ5OiB7CiAgICAgIHBhZ2UgPSAxLAogICAgICBwZXJQYWdlID0gMTAsCiAgICAgIHNvcnQgPSAnZGVzYycKICAgIH0gPSB7fQogIH0pIHsKICAgIGNvbnN0IG9wdGlvbnMgPSB7fTsKCiAgICBpZiAoYWNjZXNzVG9rZW4pIHsKICAgICAgb3B0aW9ucy5oZWFkZXJzID0gewogICAgICAgIEF1dGhvcml6YXRpb246IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAKICAgICAgfTsKICAgIH0KCiAgICBpZiAodGhpcy5fcGFnZUluZm8uc29ydCAhPT0gbnVsbCAmJiBzb3J0ICE9PSB0aGlzLl9wYWdlSW5mby5zb3J0KSB7CiAgICAgIHBhZ2UgPSAxOwogICAgfQoKICAgIGNvbnN0IHsKICAgICAgZmlyc3RPckxhc3QsCiAgICAgIGFmdGVyT3JCZWZvcmUsCiAgICAgIGN1cnNvcgogICAgfSA9IHRoaXMuX2dldFF1ZXJ5UGFyYW1zKHsKICAgICAgcGFnZSwKICAgICAgc29ydAogICAgfSk7CgogICAgY29uc3QgewogICAgICBkYXRhCiAgICB9ID0gYXdhaXQgdGhpcy4kaHR0cC5wb3N0KGBncmFwaHFsYCwgewogICAgICB2YXJpYWJsZXM6IHsKICAgICAgICBvd25lcjogdGhpcy5vd25lciwKICAgICAgICByZXBvOiB0aGlzLnJlcG8sCiAgICAgICAgaXNzdWVJZCwKICAgICAgICBwZXJQYWdlCiAgICAgIH0sCiAgICAgIHF1ZXJ5OiBgXApxdWVyeSBnZXRDb21tZW50cygKICAkb3duZXI6IFN0cmluZyEKICAkcmVwbzogU3RyaW5nIQogICRpc3N1ZUlkOiBJbnQhCiAgJHBlclBhZ2U6IEludCEKKSB7CiAgcmVwb3NpdG9yeShvd25lcjogJG93bmVyLCBuYW1lOiAkcmVwbykgewogICAgaXNzdWUobnVtYmVyOiAkaXNzdWVJZCkgewogICAgICBjb21tZW50cygKICAgICAgICAke2ZpcnN0T3JMYXN0fTogJHBlclBhZ2UKICAgICAgICAke2FmdGVyT3JCZWZvcmUgPT09IG51bGwgPyAnJyA6IGAke2FmdGVyT3JCZWZvcmV9OiAiJHtjdXJzb3J9ImB9CiAgICAgICkgewogICAgICAgIHRvdGFsQ291bnQKICAgICAgICBwYWdlSW5mbyB7CiAgICAgICAgICBlbmRDdXJzb3IKICAgICAgICAgIHN0YXJ0Q3Vyc29yCiAgICAgICAgfQogICAgICAgIG5vZGVzIHsKICAgICAgICAgIGlkCiAgICAgICAgICBib2R5CiAgICAgICAgICBib2R5SFRNTAogICAgICAgICAgY3JlYXRlZEF0CiAgICAgICAgICB1cGRhdGVkQXQKICAgICAgICAgIGF1dGhvciB7CiAgICAgICAgICAgIGF2YXRhclVybAogICAgICAgICAgICBsb2dpbgogICAgICAgICAgICB1cmwKICAgICAgICAgIH0KICAgICAgICAgIHJlYWN0aW9uR3JvdXBzIHsKICAgICAgICAgICAgdXNlcnMgKGZpcnN0OiAwKSB7CiAgICAgICAgICAgICAgdG90YWxDb3VudAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRlbnQKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn1gCiAgICB9LCBvcHRpb25zKTsKICAgIGNvbnN0IGNvbW1lbnRzID0gZGF0YS5kYXRhLnJlcG9zaXRvcnkuaXNzdWUuY29tbWVudHM7CgogICAgaWYgKHNvcnQgPT09ICdkZXNjJykgewogICAgICBjb21tZW50cy5ub2Rlcy5yZXZlcnNlKCk7CiAgICB9CgogICAgdGhpcy5fcGFnZUluZm8gPSB7CiAgICAgIHBhZ2UsCiAgICAgIHN0YXJ0Q3Vyc29yOiBjb21tZW50cy5wYWdlSW5mby5zdGFydEN1cnNvciwKICAgICAgZW5kQ3Vyc29yOiBjb21tZW50cy5wYWdlSW5mby5lbmRDdXJzb3IsCiAgICAgIHNvcnQsCiAgICAgIHBlclBhZ2UKICAgIH07CiAgICByZXR1cm4gewogICAgICBjb3VudDogY29tbWVudHMudG90YWxDb3VudCwKICAgICAgcGFnZTogcGFnZSwKICAgICAgcGVyUGFnZTogcGVyUGFnZSwKICAgICAgZGF0YTogY29tbWVudHMubm9kZXMubWFwKG5vcm1hbGl6ZUNvbW1lbnQpCiAgICB9OwogIH0KICAvKioKICAgKiBDcmVhdGUgYSBuZXcgY29tbWVudAogICAqCiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L211dGF0aW9uL2FkZGNvbW1lbnQvCiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L2lucHV0X29iamVjdC9hZGRjb21tZW50aW5wdXQvCiAgICovCgoKICBhc3luYyBwb3N0Q29tbWVudCh7CiAgICBhY2Nlc3NUb2tlbiwKICAgIGNvbnRlbnQKICB9KSB7CiAgICBjb25zdCB7CiAgICAgIGRhdGEKICAgIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYGdyYXBocWxgLCB7CiAgICAgIHZhcmlhYmxlczogewogICAgICAgIC8vIHBvc3RDb21tZW50IG5lZWRzIGlzc3VlIE5vZGVJZCwgc28gd2Ugc3RvcmUgaXQgaW50ZXJuYWxseQogICAgICAgIGlzc3VlTm9kZUlkOiB0aGlzLl9pc3N1ZU5vZGVJZCwKICAgICAgICBjb250ZW50CiAgICAgIH0sCiAgICAgIHF1ZXJ5OiBgXAptdXRhdGlvbiBwb3N0Q29tbWVudCgKICAkaXNzdWVOb2RlSWQ6IElEIQogICRjb250ZW50OiBTdHJpbmchCikgewogIGFkZENvbW1lbnQoCiAgICBpbnB1dDogewogICAgICBzdWJqZWN0SWQ6ICRpc3N1ZU5vZGVJZAogICAgICBib2R5OiAkY29udGVudAogICAgfQogICkgewogICAgY29tbWVudEVkZ2UgewogICAgICBub2RlIHsKICAgICAgICBpZAogICAgICAgIGJvZHkKICAgICAgICBib2R5SFRNTAogICAgICAgIGNyZWF0ZWRBdAogICAgICAgIHVwZGF0ZWRBdAogICAgICAgIGF1dGhvciB7CiAgICAgICAgICBhdmF0YXJVcmwKICAgICAgICAgIGxvZ2luCiAgICAgICAgICB1cmwKICAgICAgICB9CiAgICAgICAgcmVhY3Rpb25Hcm91cHMgewogICAgICAgICAgdXNlcnMgKGZpcnN0OiAwKSB7CiAgICAgICAgICAgIHRvdGFsQ291bnQKICAgICAgICAgIH0KICAgICAgICAgIGNvbnRlbnQKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn1gCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gCiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIG5vcm1hbGl6ZUNvbW1lbnQoZGF0YS5kYXRhLmFkZENvbW1lbnQuY29tbWVudEVkZ2Uubm9kZSk7CiAgfQogIC8qKgogICAqIEVkaXQgYSBjb21tZW50CiAgICoKICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjQvbXV0YXRpb24vdXBkYXRlaXNzdWVjb21tZW50LwogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC9pbnB1dF9vYmplY3QvdXBkYXRlaXNzdWVjb21tZW50aW5wdXQvCiAgICovCgoKICBhc3luYyBwdXRDb21tZW50KHsKICAgIGFjY2Vzc1Rva2VuLAogICAgY29tbWVudElkLAogICAgY29udGVudAogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgZGF0YQogICAgfSA9IGF3YWl0IHRoaXMuJGh0dHAucG9zdChgZ3JhcGhxbGAsIHsKICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgY29tbWVudElkLAogICAgICAgIGNvbnRlbnQKICAgICAgfSwKICAgICAgcXVlcnk6IGBcCm11dGF0aW9uIHB1dENvbW1lbnQoCiAgJGNvbW1lbnRJZDogSUQhLAogICRjb250ZW50OiBTdHJpbmchLAopIHsKICB1cGRhdGVJc3N1ZUNvbW1lbnQoaW5wdXQ6IHsKICAgIGlkOiAkY29tbWVudElkCiAgICBib2R5OiAkY29udGVudAogIH0pIHsKICAgIGlzc3VlQ29tbWVudCB7CiAgICAgIGlkCiAgICAgIGJvZHkKICAgICAgYm9keUhUTUwKICAgICAgY3JlYXRlZEF0CiAgICAgIHVwZGF0ZWRBdAogICAgICBhdXRob3IgewogICAgICAgIGF2YXRhclVybAogICAgICAgIGxvZ2luCiAgICAgICAgdXJsCiAgICAgIH0KICAgICAgcmVhY3Rpb25Hcm91cHMgewogICAgICAgIHVzZXJzIChmaXJzdDogMCkgewogICAgICAgICAgdG90YWxDb3VudAogICAgICAgIH0KICAgICAgICBjb250ZW50CiAgICAgIH0KICAgIH0KICB9Cn1gCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gCiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIG5vcm1hbGl6ZUNvbW1lbnQoZGF0YS5kYXRhLnVwZGF0ZUlzc3VlQ29tbWVudC5pc3N1ZUNvbW1lbnQpOwogIH0KICAvKioKICAgKiBEZWxldGUgYSBjb21tZW50CiAgICoKICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjQvbXV0YXRpb24vZGVsZXRlaXNzdWVjb21tZW50LwogICAqLwoKCiAgYXN5bmMgZGVsZXRlQ29tbWVudCh7CiAgICBhY2Nlc3NUb2tlbiwKICAgIGNvbW1lbnRJZAogIH0pIHsKICAgIGF3YWl0IHRoaXMuJGh0dHAucG9zdChgZ3JhcGhxbGAsIHsKICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgY29tbWVudElkCiAgICAgIH0sCiAgICAgIHF1ZXJ5OiBgXAptdXRhdGlvbiBkZWxldGVDb21tZW50KAogICRjb21tZW50SWQ6IElEISwKKSB7CiAgZGVsZXRlSXNzdWVDb21tZW50KGlucHV0OiB7CiAgICBpZDogJGNvbW1lbnRJZAogIH0pIHsKICAgIGNsaWVudE11dGF0aW9uSWQKICB9Cn1gCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gCiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHRydWU7CiAgfQogIC8qKgogICAqIEdldCByZWFjdGlvbnMgb2YgYSBjb21tZW50CiAgICoKICAgKiBAcmVtYXJrcwogICAqIFRoaXMgcXVlcnkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkLCB1c2UgdGhlIGNvbW1lbnRzIHF1ZXJ5IGluc3RlYWQKICAgKi8KCgogIGFzeW5jIGdldENvbW1lbnRSZWFjdGlvbnMoewogICAgYWNjZXNzVG9rZW4sCiAgICBpc3N1ZUlkLAogICAgY29tbWVudElkCiAgfSkgewogICAgY29uc3QgewogICAgICBmaXJzdE9yTGFzdCwKICAgICAgYWZ0ZXJPckJlZm9yZSwKICAgICAgY3Vyc29yCiAgICB9ID0gdGhpcy5fZ2V0UXVlcnlQYXJhbXMoKTsKCiAgICBjb25zdCB7CiAgICAgIGRhdGEKICAgIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYGdyYXBocWxgLCB7CiAgICAgIHZhcmlhYmxlczogewogICAgICAgIG93bmVyOiB0aGlzLm93bmVyLAogICAgICAgIHJlcG86IHRoaXMucmVwbywKICAgICAgICBpc3N1ZUlkLAogICAgICAgIHBlclBhZ2U6IHRoaXMuX3BhZ2VJbmZvLnBlclBhZ2UKICAgICAgfSwKICAgICAgcXVlcnk6IGBcCnF1ZXJ5IGdldENvbW1lbnRzKAogICRvd25lcjogU3RyaW5nIQogICRyZXBvOiBTdHJpbmchCiAgJGlzc3VlSWQ6IEludCEKICAkcGVyUGFnZTogSW50IQopIHsKICByZXBvc2l0b3J5KG93bmVyOiAkb3duZXIsIG5hbWU6ICRyZXBvKSB7CiAgICBpc3N1ZShudW1iZXI6ICRpc3N1ZUlkKSB7CiAgICAgIGNvbW1lbnRzKAogICAgICAgICR7Zmlyc3RPckxhc3R9OiAkcGVyUGFnZQogICAgICAgICR7YWZ0ZXJPckJlZm9yZSA9PT0gbnVsbCA/ICcnIDogYCR7YWZ0ZXJPckJlZm9yZX06ICIke2N1cnNvcn0iYH0KICAgICAgKSB7CiAgICAgICAgbm9kZXMgewogICAgICAgICAgaWQKICAgICAgICAgIHJlYWN0aW9uR3JvdXBzIHsKICAgICAgICAgICAgdXNlcnMgKGZpcnN0OiAwKSB7CiAgICAgICAgICAgICAgdG90YWxDb3VudAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRlbnQKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn1gCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gCiAgICAgIH0KICAgIH0pOwogICAgY29uc3QgY29tbWVudCA9IGRhdGEuZGF0YS5yZXBvc2l0b3J5Lmlzc3VlLmNvbW1lbnRzLm5vZGVzLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBjb21tZW50SWQpOwogICAgcmV0dXJuIG5vcm1hbGl6ZVJlYWN0aW9ucyhjb21tZW50LnJlYWN0aW9uR3JvdXBzKTsKICB9CiAgLyoqCiAgICogQ3JlYXRlIGEgbmV3IHJlYWN0aW9uIG9mIGEgY29tbWVudAogICAqCiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3Y0L211dGF0aW9uL2FkZHJlYWN0aW9uLwogICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92NC9pbnB1dF9vYmplY3QvYWRkcmVhY3Rpb25pbnB1dC8KICAgKi8KCgogIGFzeW5jIHBvc3RDb21tZW50UmVhY3Rpb24oewogICAgYWNjZXNzVG9rZW4sCiAgICBjb21tZW50SWQsCiAgICByZWFjdGlvbgogIH0pIHsKICAgIGF3YWl0IHRoaXMuJGh0dHAucG9zdChgZ3JhcGhxbGAsIHsKICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgY29tbWVudElkLAogICAgICAgIGNvbnRlbnQ6IG1hcFJlYWN0aW9uTmFtZShyZWFjdGlvbikKICAgICAgfSwKICAgICAgcXVlcnk6IGBcCm11dGF0aW9uIHBvc3RDb21tZW50UmVhY3Rpb24oCiAgJGNvbW1lbnRJZDogSUQhLAogICRjb250ZW50OiBSZWFjdGlvbkNvbnRlbnQhLAopIHsKICBhZGRSZWFjdGlvbihpbnB1dDogewogICAgc3ViamVjdElkOiAkY29tbWVudElkCiAgICBjb250ZW50OiAkY29udGVudAogIH0pIHsKICAgIHJlYWN0aW9uIHsKICAgICAgZGF0YWJhc2VJZAogICAgfQogIH0KfWAKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIF9nZXRRdWVyeVBhcmFtcyh7CiAgICBwYWdlID0gdGhpcy5fcGFnZUluZm8ucGFnZSwKICAgIHNvcnQgPSB0aGlzLl9wYWdlSW5mby5zb3J0CiAgfSA9IHt9KSB7CiAgICBsZXQgZmlyc3RPckxhc3Q7CiAgICBsZXQgYWZ0ZXJPckJlZm9yZTsKICAgIGxldCBjdXJzb3I7CgogICAgaWYgKHBhZ2UgPT09IDEpIHsKICAgICAgZmlyc3RPckxhc3QgPSBzb3J0ID09PSAnYXNjJyA/ICdmaXJzdCcgOiAnbGFzdCc7CiAgICAgIGFmdGVyT3JCZWZvcmUgPSBudWxsOwogICAgICBjdXJzb3IgPSBudWxsOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHNvcnQgPT09ICdhc2MnKSB7CiAgICAgICAgaWYgKHBhZ2UgPiB0aGlzLl9wYWdlSW5mby5wYWdlKSB7CiAgICAgICAgICBmaXJzdE9yTGFzdCA9ICdmaXJzdCc7CiAgICAgICAgICBhZnRlck9yQmVmb3JlID0gJ2FmdGVyJzsKICAgICAgICAgIGN1cnNvciA9IHRoaXMuX3BhZ2VJbmZvLmVuZEN1cnNvcjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZmlyc3RPckxhc3QgPSAnbGFzdCc7CiAgICAgICAgICBhZnRlck9yQmVmb3JlID0gJ2JlZm9yZSc7CiAgICAgICAgICBjdXJzb3IgPSB0aGlzLl9wYWdlSW5mby5zdGFydEN1cnNvcjsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHBhZ2UgPiB0aGlzLl9wYWdlSW5mby5wYWdlKSB7CiAgICAgICAgICBmaXJzdE9yTGFzdCA9ICdsYXN0JzsKICAgICAgICAgIGFmdGVyT3JCZWZvcmUgPSAnYmVmb3JlJzsKICAgICAgICAgIGN1cnNvciA9IHRoaXMuX3BhZ2VJbmZvLnN0YXJ0Q3Vyc29yOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmaXJzdE9yTGFzdCA9ICdmaXJzdCc7CiAgICAgICAgICBhZnRlck9yQmVmb3JlID0gJ2FmdGVyJzsKICAgICAgICAgIGN1cnNvciA9IHRoaXMuX3BhZ2VJbmZvLmVuZEN1cnNvcjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gewogICAgICBmaXJzdE9yTGFzdCwKICAgICAgYWZ0ZXJPckJlZm9yZSwKICAgICAgY3Vyc29yCiAgICB9OwogIH0KCn0="},null]}